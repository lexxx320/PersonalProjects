DIGEST 5414624fc9619debede43f565318a227
FEquiv
R54:56 Imp <> <> lib
def 2307:2312 <> aequiv
R2323:2326 Imp <> aexp ind
R2352:2356 Imp <> state def
R2376:2378 Coq.Init.Logic <> :type_scope:x_'='_x not
R2365:2369 Imp <> aeval def
R2374:2375 Equiv <> a1 var
R2371:2372 Equiv <> st var
R2379:2383 Imp <> aeval def
R2388:2389 Equiv <> a2 var
R2385:2386 Equiv <> st var
def 2404:2409 <> bequiv
R2420:2423 Imp <> bexp ind
R2449:2453 Imp <> state def
R2473:2475 Coq.Init.Logic <> :type_scope:x_'='_x not
R2462:2466 Imp <> beval def
R2471:2472 Equiv <> b1 var
R2468:2469 Equiv <> st var
R2476:2480 Imp <> beval def
R2485:2486 Equiv <> b2 var
R2482:2483 Equiv <> st var
def 3149:3154 <> cequiv
R3165:3167 Imp <> com ind
R3199:3203 Imp <> state def
R3212:3212 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3227:3233 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3248:3248 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3215:3217 Imp <> ::x_'/'_x_'||'_x not
R3220:3223 Imp <> ::x_'/'_x_'||'_x not
R3213:3214 Equiv <> c1 var
R3218:3219 Equiv <> st var
R3224:3226 Equiv <> st' var
R3236:3238 Imp <> ::x_'/'_x_'||'_x not
R3241:3244 Imp <> ::x_'/'_x_'||'_x not
R3234:3235 Equiv <> c2 var
R3239:3240 Equiv <> st var
R3245:3247 Equiv <> st' var
prf 4243:4256 <> aequiv_example
R4261:4266 Equiv <> aequiv def
R4294:4297 Imp <> ANum constr
R4269:4274 Imp <> AMinus constr
R4285:4287 Imp <> AId constr
R4289:4289 Imp <> X def
R4277:4279 Imp <> AId constr
R4281:4281 Imp <> X def
prf 4352:4365 <> bequiv_example
R4370:4375 Equiv <> bequiv def
R4417:4421 Imp <> BTrue constr
R4378:4380 Imp <> BEq constr
R4408:4411 Imp <> ANum constr
R4383:4388 Imp <> AMinus constr
R4399:4401 Imp <> AId constr
R4403:4403 Imp <> X def
R4391:4393 Imp <> AId constr
R4395:4395 Imp <> X def
R4453:4457 Imp <> beval def
R4470:4483 Equiv <> aequiv_example thm
R4470:4483 Equiv <> aequiv_example thm
prf 4643:4651 <> skip_left
R4666:4671 Equiv <> cequiv def
R4696:4696 Equiv <> c var
R4684:4686 Imp <> ::x_';;'_x not
R4680:4683 Imp <> ::'SKIP' not
R4687:4687 Equiv <> c var
R4874:4878 Imp <> E_Seq constr
R4874:4878 Imp <> E_Seq constr
R4899:4904 Imp <> E_Skip constr
R4899:4904 Imp <> E_Skip constr
prf 5069:5078 <> skip_right
R5093:5098 Equiv <> cequiv def
R5121:5121 Equiv <> c var
R5107:5109 Imp <> ::x_';;'_x not
R5106:5106 Equiv <> c var
R5110:5113 Imp <> ::'SKIP' not
R5151:5156 Equiv <> cequiv def
prf 5431:5445 <> IFB_true_simple
R5464:5469 Equiv <> cequiv def
R5512:5513 Equiv <> c1 var
R5477:5480 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5486:5491 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5494:5499 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5502:5504 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5481:5485 Imp <> BTrue constr
R5492:5493 Equiv <> c1 var
R5500:5501 Equiv <> c2 var
R5646:5653 Imp <> E_IfTrue constr
R5646:5653 Imp <> E_IfTrue constr
prf 7558:7565 <> IFB_true
R7613:7618 Equiv <> cequiv def
R7663:7664 Equiv <> c1 var
R7629:7632 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7634:7639 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7642:7647 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7650:7652 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7633:7633 Equiv <> b var
R7640:7641 Equiv <> c1 var
R7648:7649 Equiv <> c2 var
R7589:7594 Equiv <> bequiv def
R7598:7602 Imp <> BTrue constr
R7596:7596 Equiv <> b var
R7919:7926 Imp <> E_IfTrue constr
R7919:7926 Imp <> E_IfTrue constr
prf 8031:8039 <> IFB_false
R8082:8087 Equiv <> cequiv def
R8126:8127 Equiv <> c2 var
R8095:8098 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8100:8105 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8108:8113 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8116:8118 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8099:8099 Equiv <> b var
R8106:8107 Equiv <> c1 var
R8114:8115 Equiv <> c2 var
R8060:8065 Equiv <> bequiv def
R8069:8074 Imp <> BFalse constr
R8067:8067 Equiv <> b var
R8216:8221 Equiv <> bequiv def
R8322:8330 Imp <> E_IfFalse constr
R8322:8330 Imp <> E_IfFalse constr
R8346:8351 Equiv <> bequiv def
prf 8419:8430 <> negBothSides
R8466:8469 Coq.Init.Logic <> :type_scope:x_'='_x not
R8464:8465 Equiv <> b1 var
R8470:8473 Coq.Init.Datatypes <> negb def
R8475:8476 Equiv <> b2 var
R8455:8457 Coq.Init.Logic <> :type_scope:x_'='_x not
R8448:8451 Coq.Init.Datatypes <> negb def
R8453:8454 Equiv <> b1 var
R8458:8459 Equiv <> b2 var
prf 8736:8751 <> swap_if_branches
R8772:8777 Equiv <> cequiv def
R8815:8818 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8825:8830 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8833:8838 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8841:8843 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8819:8822 Imp <> BNot constr
R8824:8824 Equiv <> b var
R8831:8832 Equiv <> e2 var
R8839:8840 Equiv <> e1 var
R8784:8787 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8789:8794 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8797:8802 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8805:8807 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8788:8788 Equiv <> b var
R8795:8796 Equiv <> e1 var
R8803:8804 Equiv <> e2 var
R8914:8922 Imp <> E_IfFalse constr
R8914:8922 Imp <> E_IfFalse constr
R8989:8996 Imp <> E_IfTrue constr
R8989:8996 Imp <> E_IfTrue constr
R9092:9100 Imp <> E_IfFalse constr
R9092:9100 Imp <> E_IfFalse constr
R9121:9132 Equiv <> negBothSides thm
R9121:9132 Equiv <> negBothSides thm
R9200:9207 Imp <> E_IfTrue constr
R9200:9207 Imp <> E_IfTrue constr
R9228:9239 Equiv <> negBothSides thm
R9228:9239 Equiv <> negBothSides thm
prf 9631:9641 <> WHILE_false
R9686:9691 Equiv <> cequiv def
R9726:9729 Imp <> ::'SKIP' not
R9701:9706 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9708:9711 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9713:9716 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9707:9707 Equiv <> b var
R9712:9712 Equiv <> c var
R9662:9667 Equiv <> bequiv def
R9671:9676 Imp <> BFalse constr
R9669:9669 Equiv <> b var
R9847:9852 Imp <> E_Skip constr
R9847:9852 Imp <> E_Skip constr
R9965:9974 Imp <> E_WhileEnd constr
R9965:9974 Imp <> E_WhileEnd constr
prf 11303:11320 <> WHILE_true_nonterm
R11371:11373 Coq.Init.Logic <> :type_scope:'~'_x not
R11404:11405 Coq.Init.Logic <> :type_scope:'~'_x not
R11374:11374 Imp <> ::x_'/'_x_'||'_x not
R11391:11394 Imp <> ::x_'/'_x_'||'_x not
R11397:11400 Imp <> ::x_'/'_x_'||'_x not
R11375:11380 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11382:11385 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11387:11390 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11381:11381 Equiv <> b var
R11386:11386 Equiv <> c var
R11395:11396 Equiv <> st var
R11401:11403 Equiv <> st' var
R11348:11353 Equiv <> bequiv def
R11357:11361 Imp <> BTrue constr
R11355:11355 Equiv <> b var
R11488:11493 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11495:11498 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11500:11503 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11488:11493 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11495:11498 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11500:11503 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11815:11820 Equiv <> bequiv def
prf 12419:12428 <> WHILE_true
R12472:12477 Equiv <> cequiv def
R12514:12519 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12525:12528 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12533:12536 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12520:12524 Imp <> BTrue constr
R12529:12532 Imp <> ::'SKIP' not
R12488:12493 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12495:12498 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12500:12503 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12494:12494 Equiv <> b var
R12499:12499 Equiv <> c var
R12448:12453 Equiv <> bequiv def
R12457:12461 Imp <> BTrue constr
R12455:12455 Equiv <> b var
R12583:12600 Equiv <> WHILE_true_nonterm thm
R12583:12600 Equiv <> WHILE_true_nonterm thm
R12657:12659 Coq.Init.Logic <> not def
R12716:12716 Coq.Init.Logic <> :type_scope:'~'_x not
R12717:12717 Imp <> ::x_'/'_x_'||'_x not
R12741:12743 Imp <> ::x_'/'_x_'||'_x not
R12746:12749 Imp <> ::x_'/'_x_'||'_x not
R12718:12723 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12729:12732 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12737:12740 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12724:12728 Imp <> BTrue constr
R12733:12736 Imp <> ::'SKIP' not
R12716:12716 Coq.Init.Logic <> :type_scope:'~'_x not
R12717:12717 Imp <> ::x_'/'_x_'||'_x not
R12741:12743 Imp <> ::x_'/'_x_'||'_x not
R12746:12749 Imp <> ::x_'/'_x_'||'_x not
R12718:12723 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12729:12732 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12737:12740 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12724:12728 Imp <> BTrue constr
R12733:12736 Imp <> ::'SKIP' not
R12777:12794 Equiv <> WHILE_true_nonterm thm
R12777:12794 Equiv <> WHILE_true_nonterm thm
R12804:12809 Equiv <> bequiv def
R12845:12847 Coq.Init.Logic <> not def
prf 12903:12916 <> loop_unrolling
R12933:12938 Equiv <> cequiv def
R12968:12971 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12973:12979 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13000:13006 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13011:13013 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12972:12972 Equiv <> b var
R12981:12983 Imp <> ::x_';;'_x not
R12980:12980 Equiv <> c var
R12984:12989 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12991:12994 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12996:12999 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12990:12990 Equiv <> b var
R12995:12995 Equiv <> c var
R13007:13010 Imp <> ::'SKIP' not
R12945:12950 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12952:12955 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12957:12960 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12951:12951 Equiv <> b var
R12956:12956 Equiv <> c var
R13173:13181 Imp <> E_IfFalse constr
R13173:13181 Imp <> E_IfFalse constr
R13202:13207 Imp <> E_Skip constr
R13202:13207 Imp <> E_Skip constr
R13245:13252 Imp <> E_IfTrue constr
R13245:13252 Imp <> E_IfTrue constr
R13279:13283 Imp <> E_Seq constr
R13279:13283 Imp <> E_Seq constr
R13430:13440 Imp <> E_WhileLoop constr
R13430:13440 Imp <> E_WhileLoop constr
R13568:13577 Imp <> E_WhileEnd constr
R13568:13577 Imp <> E_WhileEnd constr
prf 13659:13667 <> seq_assoc
R13690:13695 Equiv <> cequiv def
R13715:13717 Imp <> ::x_';;'_x not
R13724:13724 Imp <> ::x_';;'_x not
R13713:13714 Equiv <> c1 var
R13720:13721 Imp <> ::x_';;'_x not
R13718:13719 Equiv <> c2 var
R13722:13723 Equiv <> c3 var
R13698:13698 Imp <> ::x_';;'_x not
R13705:13707 Imp <> ::x_';;'_x not
R13701:13702 Imp <> ::x_';;'_x not
R13699:13700 Equiv <> c1 var
R13703:13704 Equiv <> c2 var
R13708:13709 Equiv <> c3 var
R13814:13818 Imp <> E_Seq constr
R13814:13818 Imp <> E_Seq constr
R13860:13864 Imp <> E_Seq constr
R13860:13864 Imp <> E_Seq constr
R13963:13967 Imp <> E_Seq constr
R13963:13967 Imp <> E_Seq constr
R13995:13999 Imp <> E_Seq constr
R13995:13999 Imp <> E_Seq constr
prf 14364:14392 <> identity_assignment_first_try
R14406:14407 SfLib <> id ind
R14413:14418 Equiv <> cequiv def
R14434:14437 Imp <> ::'SKIP' not
R14422:14426 Imp <> ::x_'::='_x not
R14421:14421 Equiv <> X var
R14427:14429 Imp <> AId constr
R14431:14431 Equiv <> X var
R14543:14548 Imp <> update def
R14543:14548 Imp <> update def
ax 16571:16595 <> functional_extensionality
R16630:16630 Equiv <> Y var
R16625:16625 Equiv <> X var
R16670:16672 Coq.Init.Logic <> :type_scope:x_'='_x not
R16669:16669 Equiv <> f var
R16673:16673 Equiv <> g var
R16650:16650 Equiv <> X var
R16657:16659 Coq.Init.Logic <> :type_scope:x_'='_x not
R16654:16654 Equiv <> f var
R16656:16656 Equiv <> x var
R16660:16660 Equiv <> g var
R16662:16662 Equiv <> x var
prf 16956:16974 <> identity_assignment
R16988:16989 SfLib <> id ind
R16995:17000 Equiv <> cequiv def
R17024:17027 Imp <> ::'SKIP' not
R17008:17012 Imp <> ::x_'::='_x not
R17007:17007 Equiv <> X var
R17013:17015 Imp <> AId constr
R17017:17017 Equiv <> X var
R17133:17138 Imp <> update def
R17133:17138 Imp <> update def
R17198:17222 Equiv <> functional_extensionality prfax
R17198:17222 Equiv <> functional_extensionality prfax
R17250:17260 Imp <> update_same thm
R17250:17260 Imp <> update_same thm
R17341:17344 Coq.Init.Logic <> :type_scope:x_'='_x not
R17365:17365 Coq.Init.Logic <> :type_scope:x_'='_x not
R17345:17350 Imp <> update def
R17341:17344 Coq.Init.Logic <> :type_scope:x_'='_x not
R17365:17365 Coq.Init.Logic <> :type_scope:x_'='_x not
R17345:17350 Imp <> update def
R17385:17409 Equiv <> functional_extensionality prfax
R17385:17409 Equiv <> functional_extensionality prfax
R17438:17448 Imp <> update_same thm
R17438:17448 Imp <> update_same thm
prf 17582:17594 <> assign_aequiv
R17635:17640 Equiv <> cequiv def
R17649:17653 Imp <> ::x_'::='_x not
R17648:17648 Equiv <> X var
R17654:17654 Equiv <> e var
R17642:17645 Imp <> ::'SKIP' not
R17612:17617 Equiv <> aequiv def
R17627:17627 Equiv <> e var
R17620:17622 Imp <> AId constr
R17624:17624 Equiv <> X var
R17725:17727 Coq.Init.Logic <> :type_scope:x_'='_x not
R17728:17733 Imp <> update def
R17725:17727 Coq.Init.Logic <> :type_scope:x_'='_x not
R17728:17733 Imp <> update def
R17760:17784 Equiv <> functional_extensionality prfax
R17760:17784 Equiv <> functional_extensionality prfax
R17803:17813 Imp <> update_same thm
R17803:17813 Imp <> update_same thm
R17871:17875 Imp <> E_Ass constr
R17871:17875 Imp <> E_Ass constr
R17889:17894 Equiv <> aequiv def
R17964:17969 Imp <> update def
R17977:17981 Imp <> aeval def
R17964:17969 Imp <> update def
R17977:17981 Imp <> aeval def
R18009:18014 Imp <> E_Skip constr
R18009:18014 Imp <> E_Skip constr
R18023:18047 Equiv <> functional_extensionality prfax
R18023:18047 Equiv <> functional_extensionality prfax
R18070:18080 Imp <> update_same thm
R18070:18080 Imp <> update_same thm
R18103:18108 Equiv <> aequiv def
prf 18691:18701 <> refl_aequiv
R18717:18720 Imp <> aexp ind
R18724:18729 Equiv <> aequiv def
R18733:18733 Equiv <> a var
R18731:18731 Equiv <> a var
prf 18784:18793 <> sym_aequiv
R18813:18816 Imp <> aexp ind
R18839:18844 Equiv <> aequiv def
R18849:18850 Equiv <> a1 var
R18846:18847 Equiv <> a2 var
R18823:18828 Equiv <> aequiv def
R18833:18834 Equiv <> a2 var
R18830:18831 Equiv <> a1 var
prf 18921:18932 <> trans_aequiv
R18955:18958 Imp <> aexp ind
R18997:19002 Equiv <> aequiv def
R19007:19008 Equiv <> a3 var
R19004:19005 Equiv <> a1 var
R18981:18986 Equiv <> aequiv def
R18991:18992 Equiv <> a3 var
R18988:18989 Equiv <> a2 var
R18965:18970 Equiv <> aequiv def
R18975:18976 Equiv <> a2 var
R18972:18973 Equiv <> a1 var
R19028:19033 Equiv <> aequiv def
prf 19128:19138 <> refl_bequiv
R19154:19157 Imp <> bexp ind
R19161:19166 Equiv <> bequiv def
R19170:19170 Equiv <> b var
R19168:19168 Equiv <> b var
R19189:19194 Equiv <> bequiv def
prf 19236:19245 <> sym_bequiv
R19265:19268 Imp <> bexp ind
R19291:19296 Equiv <> bequiv def
R19301:19302 Equiv <> b1 var
R19298:19299 Equiv <> b2 var
R19275:19280 Equiv <> bequiv def
R19285:19286 Equiv <> b2 var
R19282:19283 Equiv <> b1 var
R19321:19326 Equiv <> bequiv def
prf 19388:19399 <> trans_bequiv
R19422:19425 Imp <> bexp ind
R19464:19469 Equiv <> bequiv def
R19474:19475 Equiv <> b3 var
R19471:19472 Equiv <> b1 var
R19448:19453 Equiv <> bequiv def
R19458:19459 Equiv <> b3 var
R19455:19456 Equiv <> b2 var
R19432:19437 Equiv <> bequiv def
R19442:19443 Equiv <> b2 var
R19439:19440 Equiv <> b1 var
R19495:19500 Equiv <> bequiv def
prf 19595:19605 <> refl_cequiv
R19621:19623 Imp <> com ind
R19627:19632 Equiv <> cequiv def
R19636:19636 Equiv <> c var
R19634:19634 Equiv <> c var
R19655:19660 Equiv <> cequiv def
R19686:19693 Coq.Init.Logic <> iff_refl thm
R19686:19693 Coq.Init.Logic <> iff_refl thm
prf 19709:19718 <> sym_cequiv
R19738:19740 Imp <> com ind
R19763:19768 Equiv <> cequiv def
R19773:19774 Equiv <> c1 var
R19770:19771 Equiv <> c2 var
R19747:19752 Equiv <> cequiv def
R19757:19758 Equiv <> c2 var
R19754:19755 Equiv <> c1 var
R19793:19798 Equiv <> cequiv def
R19848:19852 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19836:19838 Imp <> ::x_'/'_x_'||'_x not
R19841:19844 Imp <> ::x_'/'_x_'||'_x not
R19855:19857 Imp <> ::x_'/'_x_'||'_x not
R19860:19863 Imp <> ::x_'/'_x_'||'_x not
R19848:19852 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19836:19838 Imp <> ::x_'/'_x_'||'_x not
R19841:19844 Imp <> ::x_'/'_x_'||'_x not
R19855:19857 Imp <> ::x_'/'_x_'||'_x not
R19860:19863 Imp <> ::x_'/'_x_'||'_x not
R19926:19932 Coq.Init.Logic <> iff_sym thm
R19926:19932 Coq.Init.Logic <> iff_sym thm
prf 19959:19967 <> iff_trans
R20033:20037 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20031:20032 Equiv <> P1 var
R20038:20039 Equiv <> P3 var
R20018:20022 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20016:20017 Equiv <> P2 var
R20023:20024 Equiv <> P3 var
R20003:20007 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R20001:20002 Equiv <> P1 var
R20008:20009 Equiv <> P2 var
prf 20207:20218 <> trans_cequiv
R20241:20243 Imp <> com ind
R20282:20287 Equiv <> cequiv def
R20292:20293 Equiv <> c3 var
R20289:20290 Equiv <> c1 var
R20266:20271 Equiv <> cequiv def
R20276:20277 Equiv <> c3 var
R20273:20274 Equiv <> c2 var
R20250:20255 Equiv <> cequiv def
R20260:20261 Equiv <> c2 var
R20257:20258 Equiv <> c1 var
R20313:20318 Equiv <> cequiv def
R20379:20381 Imp <> ::x_'/'_x_'||'_x not
R20384:20387 Imp <> ::x_'/'_x_'||'_x not
R20361:20369 Equiv <> iff_trans thm
R20379:20381 Imp <> ::x_'/'_x_'||'_x not
R20384:20387 Imp <> ::x_'/'_x_'||'_x not
R20361:20369 Equiv <> iff_trans thm
prf 21746:21760 <> CAss_congruence
R21802:21807 Equiv <> cequiv def
R21822:21825 Imp <> CAss constr
R21829:21831 Equiv <> a1' var
R21827:21827 Equiv <> i var
R21810:21813 Imp <> CAss constr
R21817:21818 Equiv <> a1 var
R21815:21815 Equiv <> i var
R21783:21788 Equiv <> aequiv def
R21793:21795 Equiv <> a1' var
R21790:21791 Equiv <> a1 var
R21944:21948 Imp <> E_Ass constr
R21944:21948 Imp <> E_Ass constr
R22031:22035 Imp <> E_Ass constr
R22031:22035 Imp <> E_Ass constr
prf 23889:23905 <> CWhile_congruence
R23969:23974 Equiv <> cequiv def
R23998:24003 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24007:24010 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24014:24017 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24004:24006 Equiv <> b1' var
R24011:24013 Equiv <> c1' var
R23977:23982 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23985:23988 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23991:23994 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23983:23984 Equiv <> b1 var
R23989:23990 Equiv <> c1 var
R23950:23955 Equiv <> cequiv def
R23960:23962 Equiv <> c1' var
R23957:23958 Equiv <> c1 var
R23933:23938 Equiv <> bequiv def
R23943:23945 Equiv <> b1' var
R23940:23941 Equiv <> b1 var
R24061:24066 Equiv <> bequiv def
R24068:24073 Equiv <> cequiv def
R24165:24170 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24173:24176 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24179:24182 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24165:24170 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24173:24176 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24179:24182 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24293:24302 Imp <> E_WhileEnd constr
R24293:24302 Imp <> E_WhileEnd constr
R24368:24378 Imp <> E_WhileLoop constr
R24368:24378 Imp <> E_WhileLoop constr
R24635:24640 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24644:24647 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24651:24654 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24635:24640 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24644:24647 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24651:24654 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24768:24777 Imp <> E_WhileEnd constr
R24768:24777 Imp <> E_WhileEnd constr
R24843:24853 Imp <> E_WhileLoop constr
R24843:24853 Imp <> E_WhileLoop constr
prf 25156:25170 <> CSeq_congruence
R25234:25239 Equiv <> cequiv def
R25254:25255 Imp <> ::x_';;'_x not
R25251:25253 Equiv <> c1' var
R25256:25258 Equiv <> c2' var
R25244:25245 Imp <> ::x_';;'_x not
R25242:25243 Equiv <> c1 var
R25246:25247 Equiv <> c2 var
R25215:25220 Equiv <> cequiv def
R25225:25227 Equiv <> c2' var
R25222:25223 Equiv <> c2 var
R25198:25203 Equiv <> cequiv def
R25208:25210 Equiv <> c1' var
R25205:25206 Equiv <> c1 var
R25306:25311 Equiv <> cequiv def
R25365:25369 Imp <> E_Seq constr
R25365:25369 Imp <> E_Seq constr
R25457:25462 Equiv <> cequiv def
R25502:25506 Imp <> E_Seq constr
R25502:25506 Imp <> E_Seq constr
prf 25633:25646 <> CIf_congruence
R25730:25735 Equiv <> cequiv def
R25765:25768 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25771:25776 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25780:25785 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25789:25791 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25769:25770 Equiv <> b' var
R25777:25779 Equiv <> c1' var
R25786:25788 Equiv <> c2' var
R25738:25741 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25743:25748 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25751:25756 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25759:25761 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25742:25742 Equiv <> b var
R25749:25750 Equiv <> c1 var
R25757:25758 Equiv <> c2 var
R25711:25716 Equiv <> cequiv def
R25721:25723 Equiv <> c2' var
R25718:25719 Equiv <> c2 var
R25694:25699 Equiv <> cequiv def
R25704:25706 Equiv <> c1' var
R25701:25702 Equiv <> c1 var
R25679:25684 Equiv <> bequiv def
R25688:25689 Equiv <> b' var
R25686:25686 Equiv <> b var
R25838:25843 Equiv <> cequiv def
R25884:25889 Equiv <> bequiv def
R25920:25927 Imp <> E_IfTrue constr
R25920:25927 Imp <> E_IfTrue constr
R25993:25998 Equiv <> bequiv def
R26029:26037 Imp <> E_IfFalse constr
R26029:26037 Imp <> E_IfFalse constr
R26101:26106 Equiv <> cequiv def
R26121:26126 Equiv <> bequiv def
R26186:26193 Imp <> E_IfTrue constr
R26186:26193 Imp <> E_IfTrue constr
R26283:26291 Imp <> E_IfFalse constr
R26283:26291 Imp <> E_IfFalse constr
def 26455:26472 <> congruence_example
R26477:26482 Equiv <> cequiv def
R26665:26672 Imp <> ::x_';;'_x not
R26654:26658 Imp <> ::x_'::='_x not
R26653:26653 Imp <> X def
R26659:26662 Imp <> ANum constr
R26673:26677 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26698:26716 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26745:26788 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26802:26809 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26678:26680 Imp <> BEq constr
R26691:26694 Imp <> ANum constr
R26683:26685 Imp <> AId constr
R26687:26687 Imp <> X def
R26718:26722 Imp <> ::x_'::='_x not
R26717:26717 Imp <> Y def
R26723:26728 Imp <> AMinus constr
R26739:26741 Imp <> AId constr
R26743:26743 Imp <> X def
R26731:26733 Imp <> AId constr
R26735:26735 Imp <> X def
R26790:26794 Imp <> ::x_'::='_x not
R26789:26789 Imp <> Y def
R26795:26798 Imp <> ANum constr
R26522:26529 Imp <> ::x_';;'_x not
R26511:26515 Imp <> ::x_'::='_x not
R26510:26510 Imp <> X def
R26516:26519 Imp <> ANum constr
R26530:26534 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26555:26573 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26586:26603 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26617:26624 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26535:26537 Imp <> BEq constr
R26548:26551 Imp <> ANum constr
R26540:26542 Imp <> AId constr
R26544:26544 Imp <> X def
R26575:26579 Imp <> ::x_'::='_x not
R26574:26574 Imp <> Y def
R26580:26583 Imp <> ANum constr
R26605:26609 Imp <> ::x_'::='_x not
R26604:26604 Imp <> Y def
R26610:26613 Imp <> ANum constr
R26828:26842 Equiv <> CSeq_congruence thm
R26828:26842 Equiv <> CSeq_congruence thm
R26856:26866 Equiv <> refl_cequiv thm
R26856:26866 Equiv <> refl_cequiv thm
R26880:26893 Equiv <> CIf_congruence thm
R26880:26893 Equiv <> CIf_congruence thm
R26908:26918 Equiv <> refl_bequiv thm
R26908:26918 Equiv <> refl_bequiv thm
R26933:26947 Equiv <> CAss_congruence thm
R26933:26947 Equiv <> CAss_congruence thm
R26957:26962 Equiv <> aequiv def
R26997:27006 Coq.Arith.Minus <> minus_diag thm
R26997:27006 Coq.Arith.Minus <> minus_diag thm
R27021:27031 Equiv <> refl_cequiv thm
R27021:27031 Equiv <> refl_cequiv thm
def 27709:27720 <> atrans_sound
R27740:27743 Imp <> aexp ind
R27732:27735 Imp <> aexp ind
R27770:27773 Imp <> aexp ind
R27781:27786 Equiv <> aequiv def
R27791:27796 Equiv <> atrans var
R27798:27798 Equiv <> a var
R27788:27788 Equiv <> a var
def 27814:27825 <> btrans_sound
R27845:27848 Imp <> bexp ind
R27837:27840 Imp <> bexp ind
R27875:27878 Imp <> bexp ind
R27886:27891 Equiv <> bequiv def
R27896:27901 Equiv <> btrans var
R27903:27903 Equiv <> b var
R27893:27893 Equiv <> b var
def 27919:27930 <> ctrans_sound
R27949:27951 Imp <> com ind
R27942:27944 Imp <> com ind
R27978:27980 Imp <> com ind
R27988:27993 Equiv <> cequiv def
R27998:28003 Equiv <> ctrans var
R28005:28005 Equiv <> c var
R27995:27995 Equiv <> c var
def 28323:28341 <> fold_constants_aexp
R28348:28351 Imp <> aexp ind
R28356:28359 Imp <> aexp ind
R28372:28372 Equiv <> a var
R28383:28386 Imp <> ANum constr
R28399:28402 Imp <> ANum constr
R28410:28412 Imp <> AId constr
R28426:28428 Imp <> AId constr
R28436:28440 Imp <> APlus constr
R28465:28465 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28488:28489 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28512:28512 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28466:28484 Equiv <> fold_constants_aexp def
R28490:28508 Equiv <> fold_constants_aexp def
R28527:28527 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28535:28536 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28544:28544 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28528:28531 Imp <> ANum constr
R28537:28540 Imp <> ANum constr
R28549:28552 Imp <> ANum constr
R28557:28559 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R28572:28572 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28576:28577 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28581:28581 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28586:28590 Imp <> APlus constr
R28614:28619 Imp <> AMinus constr
R28643:28643 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28666:28667 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28690:28690 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28644:28662 Equiv <> fold_constants_aexp def
R28668:28686 Equiv <> fold_constants_aexp def
R28705:28705 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28713:28714 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28722:28722 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28706:28709 Imp <> ANum constr
R28715:28718 Imp <> ANum constr
R28727:28730 Imp <> ANum constr
R28735:28737 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R28750:28750 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28754:28755 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28759:28759 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28764:28769 Imp <> AMinus constr
R28793:28797 Imp <> AMult constr
R28822:28822 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28845:28846 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28869:28869 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28823:28841 Equiv <> fold_constants_aexp def
R28847:28865 Equiv <> fold_constants_aexp def
R28884:28884 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28892:28893 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28901:28901 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28885:28888 Imp <> ANum constr
R28894:28897 Imp <> ANum constr
R28906:28909 Imp <> ANum constr
R28914:28916 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R28929:28929 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28933:28934 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28938:28938 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28943:28947 Imp <> AMult constr
def 28983:28995 <> fold_aexp_ex1
R29071:29076 Coq.Init.Logic <> :type_scope:x_'='_x not
R29003:29021 Equiv <> fold_constants_aexp def
R29031:29035 Imp <> AMult constr
R29064:29066 Imp <> AId constr
R29068:29068 Imp <> X def
R29038:29042 Imp <> APlus constr
R29054:29057 Imp <> ANum constr
R29045:29048 Imp <> ANum constr
R29077:29081 Imp <> AMult constr
R29093:29095 Imp <> AId constr
R29097:29097 Imp <> X def
R29084:29087 Imp <> ANum constr
def 29440:29452 <> fold_aexp_ex2
R29545:29549 Coq.Init.Logic <> :type_scope:x_'='_x not
R29460:29478 Equiv <> fold_constants_aexp def
R29488:29493 Imp <> AMinus constr
R29504:29508 Imp <> APlus constr
R29537:29539 Imp <> AId constr
R29541:29541 Imp <> Y def
R29511:29515 Imp <> AMult constr
R29527:29530 Imp <> ANum constr
R29518:29521 Imp <> ANum constr
R29496:29498 Imp <> AId constr
R29500:29500 Imp <> X def
R29550:29555 Imp <> AMinus constr
R29566:29570 Imp <> APlus constr
R29582:29584 Imp <> AId constr
R29586:29586 Imp <> Y def
R29573:29576 Imp <> ANum constr
R29558:29560 Imp <> AId constr
R29562:29562 Imp <> X def
def 29802:29820 <> fold_constants_bexp
R29827:29830 Imp <> bexp ind
R29835:29838 Imp <> bexp ind
R29851:29851 Equiv <> b var
R29862:29866 Imp <> BTrue constr
R29878:29882 Imp <> BTrue constr
R29888:29893 Imp <> BFalse constr
R29904:29909 Imp <> BFalse constr
R29915:29917 Imp <> BEq constr
R29942:29942 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29965:29966 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29989:29989 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29943:29961 Equiv <> fold_constants_aexp def
R29967:29985 Equiv <> fold_constants_aexp def
R30004:30004 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30012:30013 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30021:30021 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30005:30008 Imp <> ANum constr
R30014:30017 Imp <> ANum constr
R30029:30035 Coq.Arith.EqNat <> beq_nat def
R30059:30064 Imp <> BFalse constr
R30048:30052 Imp <> BTrue constr
R30074:30074 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30078:30079 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30083:30083 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30088:30090 Imp <> BEq constr
R30114:30116 Imp <> BLe constr
R30141:30141 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30164:30165 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30188:30188 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30142:30160 Equiv <> fold_constants_aexp def
R30166:30184 Equiv <> fold_constants_aexp def
R30203:30203 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30211:30212 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30220:30220 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30204:30207 Imp <> ANum constr
R30213:30216 Imp <> ANum constr
R30228:30234 SfLib <> ble_nat def
R30258:30263 Imp <> BFalse constr
R30247:30251 Imp <> BTrue constr
R30273:30273 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30277:30278 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30282:30282 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30287:30289 Imp <> BLe constr
R30313:30316 Imp <> BNot constr
R30339:30357 Equiv <> fold_constants_bexp def
R30376:30380 Imp <> BTrue constr
R30385:30390 Imp <> BFalse constr
R30400:30405 Imp <> BFalse constr
R30410:30414 Imp <> BTrue constr
R30431:30434 Imp <> BNot constr
R30454:30457 Imp <> BAnd constr
R30482:30482 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30505:30506 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30529:30529 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30483:30501 Equiv <> fold_constants_bexp def
R30507:30525 Equiv <> fold_constants_bexp def
R30544:30544 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30550:30551 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30557:30557 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30545:30549 Imp <> BTrue constr
R30552:30556 Imp <> BTrue constr
R30562:30566 Imp <> BTrue constr
R30576:30576 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30582:30583 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30590:30590 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30577:30581 Imp <> BTrue constr
R30584:30589 Imp <> BFalse constr
R30595:30600 Imp <> BFalse constr
R30610:30610 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30617:30618 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30624:30624 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30611:30616 Imp <> BFalse constr
R30619:30623 Imp <> BTrue constr
R30629:30634 Imp <> BFalse constr
R30644:30644 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30651:30652 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30659:30659 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30645:30650 Imp <> BFalse constr
R30653:30658 Imp <> BFalse constr
R30664:30669 Imp <> BFalse constr
R30679:30679 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30683:30684 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30688:30688 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30693:30696 Imp <> BAnd constr
def 30732:30744 <> fold_bexp_ex1
R30811:30815 Coq.Init.Logic <> :type_scope:x_'='_x not
R30752:30770 Equiv <> fold_constants_bexp def
R30773:30776 Imp <> BAnd constr
R30785:30788 Imp <> BNot constr
R30791:30794 Imp <> BAnd constr
R30803:30807 Imp <> BTrue constr
R30796:30801 Imp <> BFalse constr
R30778:30782 Imp <> BTrue constr
R30816:30820 Imp <> BTrue constr
def 30857:30869 <> fold_bexp_ex2
R31022:31026 Coq.Init.Logic <> :type_scope:x_'='_x not
R30877:30895 Equiv <> fold_constants_bexp def
R30905:30908 Imp <> BAnd constr
R30946:30948 Imp <> BEq constr
R30978:30983 Imp <> AMinus constr
R30995:30999 Imp <> APlus constr
R31011:31014 Imp <> ANum constr
R31002:31005 Imp <> ANum constr
R30986:30989 Imp <> ANum constr
R30951:30954 Imp <> ANum constr
R30911:30913 Imp <> BEq constr
R30924:30926 Imp <> AId constr
R30928:30928 Imp <> Y def
R30916:30918 Imp <> AId constr
R30920:30920 Imp <> X def
R31027:31030 Imp <> BAnd constr
R31054:31058 Imp <> BTrue constr
R31033:31035 Imp <> BEq constr
R31046:31048 Imp <> AId constr
R31050:31050 Imp <> Y def
R31038:31040 Imp <> AId constr
R31042:31042 Imp <> X def
def 31212:31229 <> fold_constants_com
R31236:31238 Imp <> com ind
R31243:31245 Imp <> com ind
R31258:31258 Equiv <> c var
R31269:31272 Imp <> ::'SKIP' not
R31289:31292 Imp <> ::'SKIP' not
R31299:31303 Imp <> ::x_'::='_x not
R31317:31320 Imp <> CAss constr
R31325:31343 Equiv <> fold_constants_aexp def
R31354:31357 Imp <> ::x_';;'_x not
R31372:31372 Imp <> ::x_';;'_x not
R31394:31399 Imp <> ::x_';;'_x not
R31421:31421 Imp <> ::x_';;'_x not
R31373:31390 Equiv <> fold_constants_com def
R31400:31417 Equiv <> fold_constants_com def
R31427:31430 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31432:31437 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31440:31445 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31448:31450 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31468:31486 Equiv <> fold_constants_bexp def
R31503:31507 Imp <> BTrue constr
R31512:31529 Equiv <> fold_constants_com def
R31542:31547 Imp <> BFalse constr
R31552:31569 Equiv <> fold_constants_com def
R31588:31591 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31594:31599 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31621:31648 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31670:31672 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31600:31617 Equiv <> fold_constants_com def
R31649:31666 Equiv <> fold_constants_com def
R31688:31693 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31695:31698 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31700:31703 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31721:31739 Equiv <> fold_constants_bexp def
R31756:31760 Imp <> BTrue constr
R31765:31770 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31776:31779 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31784:31787 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31771:31775 Imp <> BTrue constr
R31780:31783 Imp <> ::'SKIP' not
R31797:31802 Imp <> BFalse constr
R31807:31810 Imp <> ::'SKIP' not
R31826:31831 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31834:31838 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31859:31863 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31839:31856 Equiv <> fold_constants_com def
R31858:31858 Equiv <> c var
def 31891:31902 <> fold_com_ex1
R32358:32398 Coq.Init.Logic <> :type_scope:x_'='_x not
R32660:32660 Coq.Init.Logic <> :type_scope:x_'='_x not
R31908:31925 Equiv <> fold_constants_com def
R31990:31997 Imp <> ::x_';;'_x not
R31962:31966 Imp <> ::x_'::='_x not
R31961:31961 Imp <> X def
R31967:31971 Imp <> APlus constr
R31983:31986 Imp <> ANum constr
R31974:31977 Imp <> ANum constr
R32027:32034 Imp <> ::x_';;'_x not
R31999:32003 Imp <> ::x_'::='_x not
R31998:31998 Imp <> Y def
R32004:32009 Imp <> AMinus constr
R32020:32023 Imp <> ANum constr
R32012:32014 Imp <> AId constr
R32016:32016 Imp <> X def
R32149:32156 Imp <> ::x_';;'_x not
R32035:32038 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32093:32105 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32110:32128 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32141:32148 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32039:32041 Imp <> BEq constr
R32069:32073 Imp <> APlus constr
R32085:32088 Imp <> ANum constr
R32076:32079 Imp <> ANum constr
R32044:32049 Imp <> AMinus constr
R32060:32062 Imp <> AId constr
R32064:32064 Imp <> Y def
R32052:32054 Imp <> AId constr
R32056:32056 Imp <> X def
R32106:32109 Imp <> ::'SKIP' not
R32130:32134 Imp <> ::x_'::='_x not
R32129:32129 Imp <> Y def
R32135:32138 Imp <> ANum constr
R32273:32280 Imp <> ::x_';;'_x not
R32157:32160 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32217:32229 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32242:32259 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32264:32272 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32161:32163 Imp <> BLe constr
R32175:32180 Imp <> AMinus constr
R32192:32196 Imp <> APlus constr
R32208:32211 Imp <> ANum constr
R32199:32202 Imp <> ANum constr
R32183:32186 Imp <> ANum constr
R32166:32169 Imp <> ANum constr
R32231:32235 Imp <> ::x_'::='_x not
R32230:32230 Imp <> Y def
R32236:32239 Imp <> ANum constr
R32260:32263 Imp <> ::'SKIP' not
R32281:32286 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32307:32318 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32347:32356 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32287:32289 Imp <> BEq constr
R32300:32303 Imp <> ANum constr
R32292:32294 Imp <> AId constr
R32296:32296 Imp <> Y def
R32320:32324 Imp <> ::x_'::='_x not
R32319:32319 Imp <> X def
R32325:32329 Imp <> APlus constr
R32340:32343 Imp <> ANum constr
R32332:32334 Imp <> AId constr
R32336:32336 Imp <> X def
R32411:32418 Imp <> ::x_';;'_x not
R32400:32404 Imp <> ::x_'::='_x not
R32399:32399 Imp <> X def
R32405:32408 Imp <> ANum constr
R32448:32455 Imp <> ::x_';;'_x not
R32420:32424 Imp <> ::x_'::='_x not
R32419:32419 Imp <> Y def
R32425:32430 Imp <> AMinus constr
R32441:32444 Imp <> ANum constr
R32433:32435 Imp <> AId constr
R32437:32437 Imp <> X def
R32556:32563 Imp <> ::x_';;'_x not
R32456:32459 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32497:32509 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32514:32533 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32546:32555 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32460:32462 Imp <> BEq constr
R32490:32493 Imp <> ANum constr
R32465:32470 Imp <> AMinus constr
R32481:32483 Imp <> AId constr
R32485:32485 Imp <> Y def
R32473:32475 Imp <> AId constr
R32477:32477 Imp <> X def
R32510:32513 Imp <> ::'SKIP' not
R32535:32539 Imp <> ::x_'::='_x not
R32534:32534 Imp <> Y def
R32540:32543 Imp <> ANum constr
R32576:32583 Imp <> ::x_';;'_x not
R32565:32569 Imp <> ::x_'::='_x not
R32564:32564 Imp <> Y def
R32570:32573 Imp <> ANum constr
R32584:32589 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32610:32621 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32650:32659 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32590:32592 Imp <> BEq constr
R32603:32606 Imp <> ANum constr
R32595:32597 Imp <> AId constr
R32599:32599 Imp <> Y def
R32623:32627 Imp <> ::x_'::='_x not
R32622:32622 Imp <> X def
R32628:32632 Imp <> APlus constr
R32643:32646 Imp <> ANum constr
R32635:32637 Imp <> AId constr
R32639:32639 Imp <> X def
prf 32910:32934 <> fold_constants_aexp_sound
R32941:32952 Equiv <> atrans_sound def
R32954:32972 Equiv <> fold_constants_aexp def
R32991:33002 Equiv <> atrans_sound def
R33022:33027 Equiv <> aequiv def
R33456:33474 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33456:33474 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33456:33474 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33456:33474 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
R33500:33518 Equiv <> fold_constants_aexp def
prf 36521:36545 <> fold_constants_bexp_sound
R36551:36562 Equiv <> btrans_sound def
R36564:36582 Equiv <> fold_constants_bexp def
R36601:36612 Equiv <> btrans_sound def
R36632:36637 Equiv <> bequiv def
R37149:37167 Equiv <> fold_constants_aexp def
R37149:37167 Equiv <> fold_constants_aexp def
R37206:37224 Equiv <> fold_constants_aexp def
R37206:37224 Equiv <> fold_constants_aexp def
R37262:37266 Imp <> aeval def
R37281:37285 Imp <> aeval def
R37328:37352 Equiv <> fold_constants_aexp_sound thm
R37281:37285 Imp <> aeval def
R37262:37266 Imp <> aeval def
R37328:37352 Equiv <> fold_constants_aexp_sound thm
R37382:37386 Imp <> aeval def
R37401:37405 Imp <> aeval def
R37448:37472 Equiv <> fold_constants_aexp_sound thm
R37401:37405 Imp <> aeval def
R37382:37386 Imp <> aeval def
R37448:37472 Equiv <> fold_constants_aexp_sound thm
R37663:37669 Coq.Arith.EqNat <> beq_nat def
R37663:37669 Coq.Arith.EqNat <> beq_nat def
R37736:37738 Coq.Init.Logic <> :type_scope:x_'='_x not
R37726:37730 Imp <> aeval def
R37739:37743 Imp <> aeval def
R37749:37767 Equiv <> fold_constants_aexp def
R37736:37738 Coq.Init.Logic <> :type_scope:x_'='_x not
R37726:37730 Imp <> aeval def
R37739:37743 Imp <> aeval def
R37749:37767 Equiv <> fold_constants_aexp def
R37793:37817 Equiv <> fold_constants_aexp_sound thm
R37793:37817 Equiv <> fold_constants_aexp_sound thm
R37849:37851 Coq.Init.Logic <> :type_scope:x_'='_x not
R37838:37842 Imp <> aeval def
R37852:37856 Imp <> aeval def
R37862:37880 Equiv <> fold_constants_aexp def
R37849:37851 Coq.Init.Logic <> :type_scope:x_'='_x not
R37838:37842 Imp <> aeval def
R37852:37856 Imp <> aeval def
R37862:37880 Equiv <> fold_constants_aexp def
R37907:37931 Equiv <> fold_constants_aexp_sound thm
R37907:37931 Equiv <> fold_constants_aexp_sound thm
R37950:37968 Equiv <> fold_constants_aexp def
R37984:38002 Equiv <> fold_constants_aexp def
R37950:37968 Equiv <> fold_constants_aexp def
R37984:38002 Equiv <> fold_constants_aexp def
R37984:38002 Equiv <> fold_constants_aexp def
R37984:38002 Equiv <> fold_constants_aexp def
R37984:38002 Equiv <> fold_constants_aexp def
R37984:38002 Equiv <> fold_constants_aexp def
R38084:38090 SfLib <> ble_nat def
R38084:38090 SfLib <> ble_nat def
R38245:38263 Equiv <> fold_constants_bexp def
R38245:38263 Equiv <> fold_constants_bexp def
R38376:38394 Equiv <> fold_constants_bexp def
R38376:38394 Equiv <> fold_constants_bexp def
R38434:38452 Equiv <> fold_constants_bexp def
R38434:38452 Equiv <> fold_constants_bexp def
prf 38694:38717 <> fold_constants_com_sound
R38724:38735 Equiv <> ctrans_sound def
R38737:38754 Equiv <> fold_constants_com def
R38774:38785 Equiv <> ctrans_sound def
R38859:38869 Equiv <> refl_cequiv thm
R38859:38869 Equiv <> refl_cequiv thm
R38892:38906 Equiv <> CAss_congruence thm
R38892:38906 Equiv <> CAss_congruence thm
R38915:38939 Equiv <> fold_constants_aexp_sound thm
R38915:38939 Equiv <> fold_constants_aexp_sound thm
R38961:38975 Equiv <> CSeq_congruence thm
R38961:38975 Equiv <> CSeq_congruence thm
R39018:39023 Equiv <> bequiv def
R39028:39046 Equiv <> fold_constants_bexp def
R39018:39023 Equiv <> bequiv def
R39028:39046 Equiv <> fold_constants_bexp def
R39090:39114 Equiv <> fold_constants_bexp_sound thm
R39090:39114 Equiv <> fold_constants_bexp_sound thm
R39131:39149 Equiv <> fold_constants_bexp def
R39323:39336 Equiv <> CIf_congruence thm
R39131:39149 Equiv <> fold_constants_bexp def
R39323:39336 Equiv <> CIf_congruence thm
R39323:39336 Equiv <> CIf_congruence thm
R39323:39336 Equiv <> CIf_congruence thm
R39323:39336 Equiv <> CIf_congruence thm
R39323:39336 Equiv <> CIf_congruence thm
R39323:39336 Equiv <> CIf_congruence thm
R39391:39402 Equiv <> trans_cequiv thm
R39391:39402 Equiv <> trans_cequiv thm
R39441:39448 Equiv <> IFB_true thm
R39441:39448 Equiv <> IFB_true thm
R39503:39514 Equiv <> trans_cequiv thm
R39503:39514 Equiv <> trans_cequiv thm
R39553:39561 Equiv <> IFB_false thm
R39553:39561 Equiv <> IFB_false thm
R39607:39612 Equiv <> bequiv def
R39617:39635 Equiv <> fold_constants_bexp def
R39607:39612 Equiv <> bequiv def
R39617:39635 Equiv <> fold_constants_bexp def
R39654:39678 Equiv <> fold_constants_bexp_sound thm
R39654:39678 Equiv <> fold_constants_bexp_sound thm
def 41160:41173 <> optimize_0plus
R41180:41183 Imp <> aexp ind
R41188:41191 Imp <> aexp ind
R41204:41204 Equiv <> e var
R41218:41221 Imp <> ANum constr
R41228:41231 Imp <> ANum constr
R41242:41244 Imp <> AId constr
R41251:41253 Imp <> AId constr
R41264:41268 Imp <> APlus constr
R41304:41317 Equiv <> optimize_0plus def
R41285:41298 Equiv <> optimize_0plus def
R41354:41357 Imp <> ANum constr
R41412:41416 Imp <> APlus constr
R41459:41464 Imp <> AMinus constr
R41475:41480 Imp <> AMinus constr
R41503:41516 Equiv <> optimize_0plus def
R41483:41496 Equiv <> optimize_0plus def
R41529:41533 Imp <> AMult constr
R41544:41548 Imp <> AMult constr
R41571:41584 Equiv <> optimize_0plus def
R41551:41564 Equiv <> optimize_0plus def
prf 41606:41630 <> Optimize_0Plus_AExp_Sound
R41660:41662 Coq.Init.Logic <> :type_scope:x_'='_x not
R41650:41654 Imp <> aeval def
R41659:41659 Equiv <> e var
R41656:41657 Equiv <> st var
R41663:41667 Imp <> aeval def
R41673:41686 Equiv <> optimize_0plus def
R41688:41688 Equiv <> e var
R41669:41670 Equiv <> st var
R41771:41784 Equiv <> optimize_0plus def
R41771:41784 Equiv <> optimize_0plus def
def 42040:42057 <> optimize_0plusBexp
R42064:42067 Imp <> bexp ind
R42072:42075 Imp <> bexp ind
R42088:42088 Equiv <> e var
R42102:42106 Imp <> BTrue constr
R42111:42115 Imp <> BTrue constr
R42124:42129 Imp <> BFalse constr
R42134:42139 Imp <> BFalse constr
R42148:42150 Imp <> BEq constr
R42161:42163 Imp <> BEq constr
R42186:42199 Equiv <> optimize_0plus def
R42166:42179 Equiv <> optimize_0plus def
R42212:42214 Imp <> BLe constr
R42225:42227 Imp <> BLe constr
R42250:42263 Equiv <> optimize_0plus def
R42230:42243 Equiv <> optimize_0plus def
R42276:42279 Imp <> BNot constr
R42286:42289 Imp <> BNot constr
R42292:42309 Equiv <> optimize_0plusBexp def
R42311:42311 Equiv <> e var
R42321:42324 Imp <> BAnd constr
R42335:42338 Imp <> BAnd constr
R42365:42382 Equiv <> optimize_0plusBexp def
R42341:42358 Equiv <> optimize_0plusBexp def
prf 42404:42420 <> optimizeBExpSound
R42450:42452 Coq.Init.Logic <> :type_scope:x_'='_x not
R42440:42444 Imp <> beval def
R42449:42449 Equiv <> b var
R42446:42447 Equiv <> st var
R42453:42457 Imp <> beval def
R42463:42480 Equiv <> optimize_0plusBexp def
R42482:42482 Equiv <> b var
R42459:42460 Equiv <> st var
R42610:42634 Equiv <> Optimize_0Plus_AExp_Sound thm
R42610:42634 Equiv <> Optimize_0Plus_AExp_Sound thm
R42646:42670 Equiv <> Optimize_0Plus_AExp_Sound thm
R42646:42670 Equiv <> Optimize_0Plus_AExp_Sound thm
R42706:42730 Equiv <> Optimize_0Plus_AExp_Sound thm
R42706:42730 Equiv <> Optimize_0Plus_AExp_Sound thm
R42742:42766 Equiv <> Optimize_0Plus_AExp_Sound thm
R42742:42766 Equiv <> Optimize_0Plus_AExp_Sound thm
def 42838:42854 <> optimize_0plusCom
R42861:42863 Imp <> com ind
R42868:42870 Imp <> com ind
R42883:42883 Equiv <> c var
R42897:42901 Imp <> CSkip constr
R42906:42910 Imp <> CSkip constr
R42919:42922 Imp <> CAss constr
R42931:42934 Imp <> CAss constr
R42939:42952 Equiv <> optimize_0plus def
R42964:42967 Imp <> CSeq constr
R42978:42981 Imp <> CSeq constr
R43007:43023 Equiv <> optimize_0plusCom def
R42984:43000 Equiv <> optimize_0plusCom def
R43036:43038 Imp <> CIf constr
R43049:43051 Imp <> CIf constr
R43123:43139 Equiv <> optimize_0plusCom def
R43077:43093 Equiv <> optimize_0plusCom def
R43054:43071 Equiv <> optimize_0plusBexp def
R43151:43156 Imp <> CWhile constr
R43165:43170 Imp <> CWhile constr
R43196:43212 Equiv <> optimize_0plusCom def
R43173:43190 Equiv <> optimize_0plusBexp def
def 44148:44157 <> subst_aexp
R44164:44165 SfLib <> id ind
R44173:44176 Imp <> aexp ind
R44184:44187 Imp <> aexp ind
R44192:44195 Imp <> aexp ind
R44208:44208 Equiv <> a var
R44219:44222 Imp <> ANum constr
R44235:44238 Imp <> ANum constr
R44246:44248 Imp <> AId constr
R44265:44273 SfLib <> eq_id_dec thm
R44275:44275 Equiv <> i var
R44292:44294 Imp <> AId constr
R44285:44285 Equiv <> u var
R44303:44307 Imp <> APlus constr
R44319:44323 Imp <> APlus constr
R44346:44355 Equiv <> subst_aexp def
R44359:44359 Equiv <> u var
R44357:44357 Equiv <> i var
R44326:44335 Equiv <> subst_aexp def
R44339:44339 Equiv <> u var
R44337:44337 Equiv <> i var
R44369:44374 Imp <> AMinus constr
R44385:44390 Imp <> AMinus constr
R44413:44422 Equiv <> subst_aexp def
R44426:44426 Equiv <> u var
R44424:44424 Equiv <> i var
R44393:44402 Equiv <> subst_aexp def
R44406:44406 Equiv <> u var
R44404:44404 Equiv <> i var
R44436:44440 Imp <> AMult constr
R44452:44456 Imp <> AMult constr
R44479:44488 Equiv <> subst_aexp def
R44492:44492 Equiv <> u var
R44490:44490 Equiv <> i var
R44459:44468 Equiv <> subst_aexp def
R44472:44472 Equiv <> u var
R44470:44470 Equiv <> i var
def 44514:44526 <> subst_aexp_ex
R44596:44601 Coq.Init.Logic <> :type_scope:x_'='_x not
R44643:44643 Coq.Init.Logic <> :type_scope:x_'='_x not
R44532:44541 Equiv <> subst_aexp def
R44574:44578 Imp <> APlus constr
R44589:44591 Imp <> AId constr
R44593:44593 Imp <> X def
R44581:44583 Imp <> AId constr
R44585:44585 Imp <> Y def
R44546:44550 Imp <> APlus constr
R44563:44566 Imp <> ANum constr
R44553:44556 Imp <> ANum constr
R44543:44543 Imp <> X def
R44602:44606 Imp <> APlus constr
R44617:44621 Imp <> APlus constr
R44634:44637 Imp <> ANum constr
R44624:44627 Imp <> ANum constr
R44609:44611 Imp <> AId constr
R44613:44613 Imp <> Y def
def 44839:44858 <> subst_equiv_property
R44885:44890 Equiv <> cequiv def
R44935:44937 Imp <> ::x_';;'_x not
R44928:44932 Imp <> ::x_'::='_x not
R44926:44927 Equiv <> i1 var
R44933:44934 Equiv <> a1 var
R44940:44944 Imp <> ::x_'::='_x not
R44938:44939 Equiv <> i2 var
R44945:44954 Equiv <> subst_aexp def
R44962:44963 Equiv <> a2 var
R44959:44960 Equiv <> a1 var
R44956:44957 Equiv <> i1 var
R44902:44904 Imp <> ::x_';;'_x not
R44895:44899 Imp <> ::x_'::='_x not
R44893:44894 Equiv <> i1 var
R44900:44901 Equiv <> a1 var
R44907:44911 Imp <> ::x_'::='_x not
R44905:44906 Equiv <> i2 var
R44912:44913 Equiv <> a2 var
prf 46206:46218 <> subst_inequiv
R46225:46226 Coq.Init.Logic <> :type_scope:'~'_x not
R46227:46246 Equiv <> subst_equiv_property def
R46265:46284 Equiv <> subst_equiv_property def
R46495:46510 Imp <> ::x_';;'_x not
R46468:46472 Imp <> ::x_'::='_x not
R46467:46467 Imp <> X def
R46473:46477 Imp <> APlus constr
R46488:46491 Imp <> ANum constr
R46480:46482 Imp <> AId constr
R46484:46484 Imp <> X def
R46512:46516 Imp <> ::x_'::='_x not
R46511:46511 Imp <> Y def
R46517:46519 Imp <> AId constr
R46521:46521 Imp <> X def
R46495:46510 Imp <> ::x_';;'_x not
R46468:46472 Imp <> ::x_'::='_x not
R46467:46467 Imp <> X def
R46473:46477 Imp <> APlus constr
R46488:46491 Imp <> ANum constr
R46480:46482 Imp <> AId constr
R46484:46484 Imp <> X def
R46512:46516 Imp <> ::x_'::='_x not
R46511:46511 Imp <> Y def
R46517:46519 Imp <> AId constr
R46521:46521 Imp <> X def
R46578:46593 Imp <> ::x_';;'_x not
R46551:46555 Imp <> ::x_'::='_x not
R46550:46550 Imp <> X def
R46556:46560 Imp <> APlus constr
R46571:46574 Imp <> ANum constr
R46563:46565 Imp <> AId constr
R46567:46567 Imp <> X def
R46595:46599 Imp <> ::x_'::='_x not
R46594:46594 Imp <> Y def
R46600:46604 Imp <> APlus constr
R46615:46618 Imp <> ANum constr
R46607:46609 Imp <> AId constr
R46611:46611 Imp <> X def
R46578:46593 Imp <> ::x_';;'_x not
R46551:46555 Imp <> ::x_'::='_x not
R46550:46550 Imp <> X def
R46556:46560 Imp <> APlus constr
R46571:46574 Imp <> ANum constr
R46563:46565 Imp <> AId constr
R46567:46567 Imp <> X def
R46595:46599 Imp <> ::x_'::='_x not
R46594:46594 Imp <> Y def
R46600:46604 Imp <> APlus constr
R46615:46618 Imp <> ANum constr
R46607:46609 Imp <> AId constr
R46611:46611 Imp <> X def
R46648:46653 Equiv <> cequiv def
R46648:46653 Equiv <> cequiv def
R46873:46878 Imp <> update def
R46905:46905 Imp <> Y def
R46881:46886 Imp <> update def
R46900:46900 Imp <> X def
R46888:46898 Imp <> empty_state def
R46873:46878 Imp <> update def
R46905:46905 Imp <> Y def
R46881:46886 Imp <> update def
R46900:46900 Imp <> X def
R46888:46898 Imp <> empty_state def
R46930:46935 Imp <> update def
R46962:46962 Imp <> Y def
R46938:46943 Imp <> update def
R46957:46957 Imp <> X def
R46945:46955 Imp <> empty_state def
R46930:46935 Imp <> update def
R46962:46962 Imp <> Y def
R46938:46943 Imp <> update def
R46957:46957 Imp <> X def
R46945:46955 Imp <> empty_state def
R46991:46993 Imp <> ::x_'/'_x_'||'_x not
R47005:47008 Imp <> ::x_'/'_x_'||'_x not
R46994:47004 Imp <> empty_state def
R47031:47033 Imp <> ::x_'/'_x_'||'_x not
R47045:47048 Imp <> ::x_'/'_x_'||'_x not
R47034:47044 Imp <> empty_state def
R47102:47107 Imp <> update def
R47121:47121 Imp <> X def
R47109:47119 Imp <> empty_state def
R47082:47086 Imp <> E_Seq constr
R47142:47146 Imp <> E_Ass constr
R46991:46993 Imp <> ::x_'/'_x_'||'_x not
R47005:47008 Imp <> ::x_'/'_x_'||'_x not
R46994:47004 Imp <> empty_state def
R47031:47033 Imp <> ::x_'/'_x_'||'_x not
R47045:47048 Imp <> ::x_'/'_x_'||'_x not
R47034:47044 Imp <> empty_state def
R47031:47033 Imp <> ::x_'/'_x_'||'_x not
R47045:47048 Imp <> ::x_'/'_x_'||'_x not
R47034:47044 Imp <> empty_state def
R47102:47107 Imp <> update def
R47121:47121 Imp <> X def
R47109:47119 Imp <> empty_state def
R47082:47086 Imp <> E_Seq constr
R47142:47146 Imp <> E_Ass constr
R47142:47146 Imp <> E_Ass constr
R47102:47107 Imp <> update def
R47121:47121 Imp <> X def
R47109:47119 Imp <> empty_state def
R47082:47086 Imp <> E_Seq constr
R47142:47146 Imp <> E_Ass constr
R47142:47146 Imp <> E_Ass constr
R47102:47107 Imp <> update def
R47121:47121 Imp <> X def
R47109:47119 Imp <> empty_state def
R47082:47086 Imp <> E_Seq constr
R47142:47146 Imp <> E_Ass constr
R47142:47146 Imp <> E_Ass constr
R47102:47107 Imp <> update def
R47121:47121 Imp <> X def
R47109:47119 Imp <> empty_state def
R47082:47086 Imp <> E_Seq constr
R47301:47303 Coq.Init.Logic <> :type_scope:x_'='_x not
R47324:47342 Imp <> ceval_deterministic thm
R47347:47357 Imp <> empty_state def
R47301:47303 Coq.Init.Logic <> :type_scope:x_'='_x not
R47324:47342 Imp <> ceval_deterministic thm
R47347:47357 Imp <> empty_state def
R47399:47401 Coq.Init.Logic <> :type_scope:x_'='_x not
R47398:47398 Imp <> Y def
R47406:47406 Imp <> Y def
R47399:47401 Coq.Init.Logic <> :type_scope:x_'='_x not
R47398:47398 Imp <> Y def
R47406:47406 Imp <> Y def
ind 47813:47832 <> var_not_used_in_aexp
constr 47863:47868 <> VNUNum
constr 47917:47921 <> VNUId
constr 47979:47985 <> VNUPlus
constr 48120:48127 <> VNUMinus
constr 48263:48269 <> VNUMult
R47837:47838 SfLib <> id ind
R47843:47846 Imp <> aexp ind
R47881:47900 Equiv <> var_not_used_in_aexp ind
R47905:47908 Imp <> ANum constr
R47910:47910 Equiv <> n var
R47944:47963 Equiv <> var_not_used_in_aexp ind
R47968:47970 Imp <> AId constr
R47972:47972 Equiv <> Y var
R47935:47938 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R47939:47939 Equiv <> Y var
R48079:48098 Equiv <> var_not_used_in_aexp ind
R48103:48107 Imp <> APlus constr
R48112:48113 Equiv <> a2 var
R48109:48110 Equiv <> a1 var
R48044:48063 Equiv <> var_not_used_in_aexp ind
R48067:48068 Equiv <> a2 var
R48009:48028 Equiv <> var_not_used_in_aexp ind
R48032:48033 Equiv <> a1 var
R48221:48240 Equiv <> var_not_used_in_aexp ind
R48245:48250 Imp <> AMinus constr
R48255:48256 Equiv <> a2 var
R48252:48253 Equiv <> a1 var
R48186:48205 Equiv <> var_not_used_in_aexp ind
R48209:48210 Equiv <> a2 var
R48151:48170 Equiv <> var_not_used_in_aexp ind
R48174:48175 Equiv <> a1 var
R48363:48382 Equiv <> var_not_used_in_aexp ind
R48387:48391 Imp <> AMult constr
R48396:48397 Equiv <> a2 var
R48393:48394 Equiv <> a1 var
R48328:48347 Equiv <> var_not_used_in_aexp ind
R48351:48352 Equiv <> a2 var
R48293:48312 Equiv <> var_not_used_in_aexp ind
R48316:48317 Equiv <> a1 var
prf 48408:48422 <> aeval_weakening
R48500:48502 Coq.Init.Logic <> :type_scope:x_'='_x not
R48476:48480 Imp <> aeval def
R48499:48499 Equiv <> a var
R48483:48488 Imp <> update def
R48495:48496 Equiv <> ni var
R48493:48493 Equiv <> i var
R48490:48491 Equiv <> st var
R48503:48507 Imp <> aeval def
R48512:48512 Equiv <> a var
R48509:48510 Equiv <> st var
R48446:48465 Equiv <> var_not_used_in_aexp ind
R48469:48469 Equiv <> a var
R48467:48467 Equiv <> i var
prf 48821:48836 <> inequiv_exercise
R48842:48843 Coq.Init.Logic <> :type_scope:'~'_x not
R48844:48849 Equiv <> cequiv def
R48877:48880 Imp <> ::'SKIP' not
R48852:48857 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R48863:48866 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R48871:48874 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R48858:48862 Imp <> BTrue constr
R48867:48870 Imp <> ::'SKIP' not
mod 50910:50913 <> Himp
ind 51018:51020 Himp com
constr 51036:51040 Himp CSkip
constr 51052:51055 Himp CAss
constr 51081:51084 Himp CSeq
constr 51110:51112 Himp CIf
constr 51146:51151 Himp CWhile
constr 51178:51183 Himp CHavoc
R51044:51046 Equiv <> com ind
R51073:51075 Equiv <> com ind
R51065:51068 Imp <> aexp ind
R51059:51060 SfLib <> id ind
R51102:51104 Equiv <> com ind
R51095:51097 Equiv <> com ind
R51088:51090 Equiv <> com ind
R51138:51140 Equiv <> com ind
R51131:51133 Equiv <> com ind
R51124:51126 Equiv <> com ind
R51116:51119 Imp <> bexp ind
R51170:51172 Equiv <> com ind
R51163:51165 Equiv <> com ind
R51155:51158 Imp <> bexp ind
R51193:51195 Equiv <> com ind
R51187:51188 SfLib <> id ind
R51442:51446 Equiv Himp CSkip constr
not 51428 Himp ::'SKIP'
R51476:51479 Equiv Himp CAss constr
not 51458 Himp ::x_'::='_x
R51527:51530 Equiv Himp CSeq constr
not 51510 Himp ::x_';;'_x
R51615:51620 Equiv Himp CWhile constr
not 51584 Himp ::'WHILE'_x_'DO'_x_'END'
R51714:51716 Equiv Himp CIf constr
not 51672 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R51789:51794 Equiv Himp CHavoc constr
not 51773 Himp ::'HAVOC'_x
ind 52204:52208 Himp ceval
constr 52249:52254 Himp E_Skip
constr 52297:52301 Himp E_Ass
constr 52425:52429 Himp E_Seq
constr 52555:52562 Himp E_IfTrue
constr 52731:52739 Himp E_IfFalse
constr 52911:52920 Himp E_WhileEnd
constr 53044:53054 Himp E_WhileLoop
R52228:52232 Imp <> state def
R52219:52223 Imp <> state def
R52212:52214 Equiv Himp com ind
R53348:53352 Equiv <> ceval ind
R52270:52274 Imp <> state def
R52281:52283 Equiv Himp ::x_'/'_x_'||'_x not
R52286:52289 Equiv Himp ::x_'/'_x_'||'_x not
R52277:52280 Equiv Himp ::'SKIP' not
R52284:52285 Equiv <> st var
R52290:52291 Equiv <> st var
R52318:52322 Imp <> state def
R52331:52334 Imp <> aexp ind
R52342:52344 Coq.Init.Datatypes <> nat ind
R52352:52353 SfLib <> id ind
R52388:52388 Equiv Himp ::x_'/'_x_'||'_x not
R52397:52400 Equiv Himp ::x_'/'_x_'||'_x not
R52403:52406 Equiv Himp ::x_'/'_x_'||'_x not
R52390:52394 Equiv Himp ::x_'::='_x not
R52389:52389 Equiv <> X var
R52395:52396 Equiv <> a1 var
R52401:52402 Equiv <> st var
R52407:52412 Imp <> update def
R52419:52419 Equiv <> n var
R52417:52417 Equiv <> X var
R52414:52415 Equiv <> st var
R52380:52382 Coq.Init.Logic <> :type_scope:x_'='_x not
R52369:52373 Imp <> aeval def
R52378:52379 Equiv <> a1 var
R52375:52376 Equiv <> st var
R52383:52383 Equiv <> n var
R52449:52451 Equiv Himp com ind
R52469:52473 Imp <> state def
R52527:52527 Equiv Himp ::x_'/'_x_'||'_x not
R52536:52539 Equiv Himp ::x_'/'_x_'||'_x not
R52542:52545 Equiv Himp ::x_'/'_x_'||'_x not
R52530:52533 Equiv Himp ::x_';;'_x not
R52528:52529 Equiv <> c1 var
R52534:52535 Equiv <> c2 var
R52540:52541 Equiv <> st var
R52546:52549 Equiv <> st'' var
R52509:52511 Equiv Himp ::x_'/'_x_'||'_x not
R52515:52518 Equiv Himp ::x_'/'_x_'||'_x not
R52507:52508 Equiv <> c2 var
R52512:52514 Equiv <> st' var
R52519:52522 Equiv <> st'' var
R52491:52493 Equiv Himp ::x_'/'_x_'||'_x not
R52496:52499 Equiv Himp ::x_'/'_x_'||'_x not
R52489:52490 Equiv <> c1 var
R52494:52495 Equiv <> st var
R52500:52502 Equiv <> st' var
R52583:52587 Imp <> state def
R52596:52599 Imp <> bexp ind
R52611:52613 Equiv Himp com ind
R52687:52687 Equiv Himp ::x_'/'_x_'||'_x not
R52713:52716 Equiv Himp ::x_'/'_x_'||'_x not
R52719:52722 Equiv Himp ::x_'/'_x_'||'_x not
R52688:52691 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R52694:52699 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R52702:52707 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R52710:52712 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R52692:52693 Equiv <> b1 var
R52700:52701 Equiv <> c1 var
R52708:52709 Equiv <> c2 var
R52717:52718 Equiv <> st var
R52723:52725 Equiv <> st' var
R52671:52673 Equiv Himp ::x_'/'_x_'||'_x not
R52676:52679 Equiv Himp ::x_'/'_x_'||'_x not
R52669:52670 Equiv <> c1 var
R52674:52675 Equiv <> st var
R52680:52682 Equiv <> st' var
R52643:52645 Coq.Init.Logic <> :type_scope:x_'='_x not
R52632:52636 Imp <> beval def
R52641:52642 Equiv <> b1 var
R52638:52639 Equiv <> st var
R52646:52649 Coq.Init.Datatypes <> true constr
R52760:52764 Imp <> state def
R52773:52776 Imp <> bexp ind
R52788:52790 Equiv Himp com ind
R52867:52867 Equiv Himp ::x_'/'_x_'||'_x not
R52893:52896 Equiv Himp ::x_'/'_x_'||'_x not
R52899:52902 Equiv Himp ::x_'/'_x_'||'_x not
R52868:52871 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R52874:52879 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R52882:52887 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R52890:52892 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R52872:52873 Equiv <> b1 var
R52880:52881 Equiv <> c1 var
R52888:52889 Equiv <> c2 var
R52897:52898 Equiv <> st var
R52903:52905 Equiv <> st' var
R52851:52853 Equiv Himp ::x_'/'_x_'||'_x not
R52856:52859 Equiv Himp ::x_'/'_x_'||'_x not
R52849:52850 Equiv <> c2 var
R52854:52855 Equiv <> st var
R52860:52862 Equiv <> st' var
R52821:52823 Coq.Init.Logic <> :type_scope:x_'='_x not
R52810:52814 Imp <> beval def
R52819:52820 Equiv <> b1 var
R52816:52817 Equiv <> st var
R52824:52828 Coq.Init.Datatypes <> false constr
R52937:52940 Imp <> bexp ind
R52949:52953 Imp <> state def
R52962:52964 Equiv Himp com ind
R53008:53008 Equiv Himp ::x_'/'_x_'||'_x not
R53027:53030 Equiv Himp ::x_'/'_x_'||'_x not
R53033:53036 Equiv Himp ::x_'/'_x_'||'_x not
R53009:53014 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53017:53020 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53023:53026 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53015:53016 Equiv <> b1 var
R53021:53022 Equiv <> c1 var
R53031:53032 Equiv <> st var
R53037:53038 Equiv <> st var
R52996:52998 Coq.Init.Logic <> :type_scope:x_'='_x not
R52985:52989 Imp <> beval def
R52994:52995 Equiv <> b1 var
R52991:52992 Equiv <> st var
R52999:53003 Coq.Init.Datatypes <> false constr
R53080:53084 Imp <> state def
R53093:53096 Imp <> bexp ind
R53105:53107 Equiv Himp com ind
R53261:53261 Equiv Himp ::x_'/'_x_'||'_x not
R53280:53283 Equiv Himp ::x_'/'_x_'||'_x not
R53286:53289 Equiv Himp ::x_'/'_x_'||'_x not
R53262:53267 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53270:53273 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53276:53279 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53268:53269 Equiv <> b1 var
R53274:53275 Equiv <> c1 var
R53284:53285 Equiv <> st var
R53290:53293 Equiv <> st'' var
R53205:53205 Equiv Himp ::x_'/'_x_'||'_x not
R53224:53227 Equiv Himp ::x_'/'_x_'||'_x not
R53231:53234 Equiv Himp ::x_'/'_x_'||'_x not
R53206:53211 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53214:53217 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53220:53223 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53212:53213 Equiv <> b1 var
R53218:53219 Equiv <> c1 var
R53228:53230 Equiv <> st' var
R53235:53238 Equiv <> st'' var
R53171:53173 Equiv Himp ::x_'/'_x_'||'_x not
R53176:53179 Equiv Himp ::x_'/'_x_'||'_x not
R53169:53170 Equiv <> c1 var
R53174:53175 Equiv <> st var
R53180:53182 Equiv <> st' var
R53140:53142 Coq.Init.Logic <> :type_scope:x_'='_x not
R53129:53133 Imp <> beval def
R53138:53139 Equiv <> b1 var
R53135:53136 Equiv <> st var
R53143:53146 Coq.Init.Datatypes <> true constr
R53348:53352 Equiv Himp ceval ind
not 53323 Himp ::x_'/'_x_'||'_x
def 53726:53739 Himp havoc_example1
R53743:53743 Equiv Himp ::x_'/'_x_'||'_x not
R53751:53754 Equiv Himp ::x_'/'_x_'||'_x not
R53766:53769 Equiv Himp ::x_'/'_x_'||'_x not
R53744:53749 Equiv Himp ::'HAVOC'_x not
R53750:53750 Imp <> X def
R53755:53765 Imp <> empty_state def
R53770:53775 Imp <> update def
R53789:53789 Imp <> X def
R53777:53787 Imp <> empty_state def
def 53839:53852 Himp havoc_example2
R53858:53858 Equiv Himp ::x_'/'_x_'||'_x not
R53873:53876 Equiv Himp ::x_'/'_x_'||'_x not
R53888:53891 Equiv Himp ::x_'/'_x_'||'_x not
R53863:53865 Equiv Himp ::x_';;'_x not
R53859:53862 Equiv Himp ::'SKIP' not
R53866:53871 Equiv Himp ::'HAVOC'_x not
R53872:53872 Imp <> Z def
R53877:53887 Imp <> empty_state def
R53892:53897 Imp <> update def
R53911:53911 Imp <> Z def
R53899:53909 Imp <> empty_state def
def 54052:54057 Himp cequiv
R54068:54070 Equiv Himp com ind
R54099:54103 Imp <> state def
R54122:54126 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R54110:54112 Equiv Himp ::x_'/'_x_'||'_x not
R54115:54118 Equiv Himp ::x_'/'_x_'||'_x not
R54108:54109 Equiv <> c1 var
R54113:54114 Equiv <> st var
R54119:54121 Equiv <> st' var
R54129:54131 Equiv Himp ::x_'/'_x_'||'_x not
R54134:54137 Equiv Himp ::x_'/'_x_'||'_x not
R54127:54128 Equiv <> c2 var
R54132:54133 Equiv <> st var
R54138:54140 Equiv <> st' var
def 54440:54442 Himp pXY
R54456:54458 Equiv Himp ::x_';;'_x not
R54449:54454 Equiv Himp ::'HAVOC'_x not
R54455:54455 Imp <> X def
R54459:54464 Equiv Himp ::'HAVOC'_x not
R54465:54465 Imp <> Y def
def 54480:54482 Himp pYX
R54496:54498 Equiv Himp ::x_';;'_x not
R54489:54494 Equiv Himp ::'HAVOC'_x not
R54495:54495 Imp <> Y def
R54499:54504 Equiv Himp ::'HAVOC'_x not
R54505:54505 Imp <> X def
prf 54613:54626 Himp pXY_cequiv_pYX
R54646:54649 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R54632:54637 Equiv Himp cequiv def
R54643:54645 Equiv Himp pYX def
R54639:54641 Equiv Himp pXY def
R54650:54650 Coq.Init.Logic <> :type_scope:'~'_x not
R54651:54656 Equiv Himp cequiv def
R54662:54664 Equiv Himp pYX def
R54658:54660 Equiv Himp pXY def
def 54819:54824 Himp ptwice
R54838:54840 Equiv Himp ::x_';;'_x not
R54831:54836 Equiv Himp ::'HAVOC'_x not
R54837:54837 Imp <> X def
R54841:54846 Equiv Himp ::'HAVOC'_x not
R54847:54847 Imp <> Y def
def 54862:54866 Himp pcopy
R54880:54882 Equiv Himp ::x_';;'_x not
R54873:54878 Equiv Himp ::'HAVOC'_x not
R54879:54879 Imp <> X def
R54884:54888 Equiv Himp ::x_'::='_x not
R54883:54883 Imp <> Y def
R54889:54891 Imp <> AId constr
R54893:54893 Imp <> X def
prf 55064:55082 Himp ptwice_cequiv_pcopy
R55107:55110 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R55088:55093 Equiv Himp cequiv def
R55102:55106 Equiv Himp pcopy def
R55095:55100 Equiv Himp ptwice def
R55111:55111 Coq.Init.Logic <> :type_scope:'~'_x not
R55112:55117 Equiv Himp cequiv def
R55126:55130 Equiv Himp pcopy def
R55119:55124 Equiv Himp ptwice def
def 55968:55969 Himp p1
R55973:55975 Equiv Himp com ind
R55982:55988 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56016:56024 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56067:56072 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55989:55992 Imp <> BNot constr
R55995:55997 Imp <> BEq constr
R56008:56011 Imp <> ANum constr
R56000:56002 Imp <> AId constr
R56004:56004 Imp <> X def
R56032:56038 Equiv Himp ::x_';;'_x not
R56025:56030 Equiv Himp ::'HAVOC'_x not
R56031:56031 Imp <> Y def
R56040:56044 Equiv Himp ::x_'::='_x not
R56039:56039 Imp <> X def
R56045:56049 Imp <> APlus constr
R56060:56063 Imp <> ANum constr
R56052:56054 Imp <> AId constr
R56056:56056 Imp <> X def
def 56087:56088 Himp p2
R56092:56094 Equiv Himp com ind
R56101:56107 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56135:56143 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56148:56153 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56108:56111 Imp <> BNot constr
R56114:56116 Imp <> BEq constr
R56127:56130 Imp <> ANum constr
R56119:56121 Imp <> AId constr
R56123:56123 Imp <> X def
R56144:56147 Equiv Himp ::'SKIP' not
prf 56166:56176 Himp p1_p2_equiv
R56180:56185 Equiv Himp cequiv def
R56190:56191 Equiv Himp p2 def
R56187:56188 Equiv Himp p1 def
def 56242:56243 Himp p3
R56247:56249 Equiv Himp com ind
R56268:56272 Equiv Himp ::x_';;'_x not
R56257:56261 Equiv Himp ::x_'::='_x not
R56256:56256 Imp <> Z def
R56262:56265 Imp <> ANum constr
R56273:56279 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56307:56315 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56337:56342 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56280:56283 Imp <> BNot constr
R56286:56288 Imp <> BEq constr
R56299:56302 Imp <> ANum constr
R56291:56293 Imp <> AId constr
R56295:56295 Imp <> X def
R56323:56329 Equiv Himp ::x_';;'_x not
R56316:56321 Equiv Himp ::'HAVOC'_x not
R56322:56322 Imp <> X def
R56330:56335 Equiv Himp ::'HAVOC'_x not
R56336:56336 Imp <> Z def
def 56357:56358 Himp p4
R56362:56364 Equiv Himp com ind
R56385:56389 Equiv Himp ::x_';;'_x not
R56372:56377 Equiv Himp ::x_'::='_x not
R56384:56384 Equiv Himp ::x_'::='_x not
R56371:56371 Imp <> X def
R56378:56381 Imp <> ANum constr
R56391:56396 Equiv Himp ::x_'::='_x not
R56403:56403 Equiv Himp ::x_'::='_x not
R56390:56390 Imp <> Z def
R56397:56400 Imp <> ANum constr
prf 56416:56428 Himp p3_p4_inequiv
R56432:56433 Coq.Init.Logic <> :type_scope:'~'_x not
R56434:56439 Equiv Himp cequiv def
R56444:56445 Equiv Himp p4 def
R56441:56442 Equiv Himp p3 def
def 56496:56497 Himp p5
R56501:56503 Equiv Himp com ind
R56510:56516 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56544:56552 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56560:56565 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56517:56520 Imp <> BNot constr
R56523:56525 Imp <> BEq constr
R56536:56539 Imp <> ANum constr
R56528:56530 Imp <> AId constr
R56532:56532 Imp <> X def
R56553:56558 Equiv Himp ::'HAVOC'_x not
R56559:56559 Imp <> X def
def 56580:56581 Himp p6
R56585:56587 Equiv Himp com ind
R56595:56599 Equiv Himp ::x_'::='_x not
R56594:56594 Imp <> X def
R56600:56603 Imp <> ANum constr
prf 56618:56628 Himp p5_p6_equiv
R56632:56637 Equiv Himp cequiv def
R56642:56643 Equiv Himp p6 def
R56639:56640 Equiv Himp p5 def
R56697:56700 Equiv <> <> mod
def 57554:57560 <> stequiv
R57573:57577 Imp <> state def
R57602:57603 SfLib <> id ind
R57612:57614 Coq.Init.Logic <> :type_scope:x_'='_x not
R57607:57609 Equiv <> st1 var
R57611:57611 Equiv <> X var
R57615:57617 Equiv <> st2 var
R57619:57619 Equiv <> X var
R57651:57657 Equiv <> stequiv def
not 57633 <> ::x_'~'_x
prf 57930:57941 <> stequiv_refl
R57958:57962 Imp <> state def
R57971:57973 Equiv <> ::x_'~'_x not
R57969:57970 Equiv <> st var
R57974:57975 Equiv <> st var
prf 58086:58096 <> stequiv_sym
R58118:58122 Imp <> state def
R58148:58150 Equiv <> ::x_'~'_x not
R58145:58147 Equiv <> st2 var
R58151:58153 Equiv <> st1 var
R58132:58134 Equiv <> ::x_'~'_x not
R58129:58131 Equiv <> st1 var
R58135:58137 Equiv <> st2 var
prf 58270:58282 <> stequiv_trans
R58308:58312 Imp <> state def
R58354:58356 Equiv <> ::x_'~'_x not
R58351:58353 Equiv <> st1 var
R58357:58359 Equiv <> st3 var
R58338:58340 Equiv <> ::x_'~'_x not
R58335:58337 Equiv <> st2 var
R58341:58343 Equiv <> st3 var
R58322:58324 Equiv <> ::x_'~'_x not
R58319:58321 Equiv <> st1 var
R58325:58327 Equiv <> st2 var
prf 58505:58518 <> stequiv_update
R58540:58544 Imp <> state def
R58576:58577 SfLib <> id ind
R58583:58585 Coq.Init.Datatypes <> nat ind
R58605:58607 Equiv <> ::x_'~'_x not
R58591:58596 Imp <> update def
R58604:58604 Equiv <> n var
R58602:58602 Equiv <> X var
R58598:58600 Equiv <> st1 var
R58608:58613 Imp <> update def
R58621:58621 Equiv <> n var
R58619:58619 Equiv <> X var
R58615:58617 Equiv <> st2 var
R58553:58555 Equiv <> ::x_'~'_x not
R58550:58552 Equiv <> st1 var
R58556:58558 Equiv <> st2 var
prf 58865:58877 <> stequiv_aeval
R58899:58903 Imp <> state def
R58935:58938 Imp <> aexp ind
R58953:58955 Coq.Init.Logic <> :type_scope:x_'='_x not
R58942:58946 Imp <> aeval def
R58952:58952 Equiv <> a var
R58948:58950 Equiv <> st1 var
R58956:58960 Imp <> aeval def
R58966:58966 Equiv <> a var
R58962:58964 Equiv <> st2 var
R58913:58915 Equiv <> ::x_'~'_x not
R58910:58912 Equiv <> st1 var
R58916:58918 Equiv <> st2 var
prf 59081:59093 <> stequiv_beval
R59115:59119 Imp <> state def
R59151:59154 Imp <> bexp ind
R59169:59171 Coq.Init.Logic <> :type_scope:x_'='_x not
R59158:59162 Imp <> beval def
R59168:59168 Equiv <> b var
R59164:59166 Equiv <> st1 var
R59172:59176 Imp <> beval def
R59182:59182 Equiv <> b var
R59178:59180 Equiv <> st2 var
R59129:59131 Equiv <> ::x_'~'_x not
R59126:59128 Equiv <> st1 var
R59132:59134 Equiv <> st2 var
prf 59412:59424 <> stequiv_ceval
R59445:59449 Imp <> state def
R59481:59483 Imp <> com ind
R59493:59497 Imp <> state def
R59530:59536 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R59549:59555 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R59589:59589 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R59544:59548 Imp <> state def
R59556:59556 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R59572:59577 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R59558:59560 Imp <> ::x_'/'_x_'||'_x not
R59564:59567 Imp <> ::x_'/'_x_'||'_x not
R59557:59557 Equiv <> c var
R59561:59563 Equiv <> st2 var
R59568:59571 Equiv <> st2' var
R59582:59584 Equiv <> ::x_'~'_x not
R59578:59581 Equiv <> st1' var
R59585:59588 Equiv <> st2' var
R59507:59509 Imp <> ::x_'/'_x_'||'_x not
R59513:59516 Imp <> ::x_'/'_x_'||'_x not
R59506:59506 Equiv <> c var
R59510:59512 Equiv <> st1 var
R59517:59520 Equiv <> st1' var
R59458:59460 Equiv <> ::x_'~'_x not
R59455:59457 Equiv <> st1 var
R59461:59463 Equiv <> st2 var
R59803:59808 Imp <> update def
R59803:59808 Imp <> update def
R59880:59892 Equiv <> stequiv_aeval prfax
R59880:59892 Equiv <> stequiv_aeval prfax
R59921:59934 Equiv <> stequiv_update prfax
R59921:59934 Equiv <> stequiv_update prfax
R60112:60116 Imp <> E_Seq constr
R60112:60116 Imp <> E_Seq constr
R60267:60274 Imp <> E_IfTrue constr
R60267:60274 Imp <> E_IfTrue constr
R60308:60320 Equiv <> stequiv_beval prfax
R60308:60320 Equiv <> stequiv_beval prfax
R60471:60479 Imp <> E_IfFalse constr
R60471:60479 Imp <> E_IfFalse constr
R60512:60524 Equiv <> stequiv_beval prfax
R60512:60524 Equiv <> stequiv_beval prfax
R60624:60633 Imp <> E_WhileEnd constr
R60624:60633 Imp <> E_WhileEnd constr
R60666:60678 Equiv <> stequiv_beval prfax
R60666:60678 Equiv <> stequiv_beval prfax
R60882:60892 Imp <> E_WhileLoop constr
R60882:60892 Imp <> E_WhileLoop constr
R60943:60955 Equiv <> stequiv_beval prfax
R60943:60955 Equiv <> stequiv_beval prfax
ind 61425:61430 <> ceval'
constr 61471:61477 <> E_equiv
R61450:61454 Imp <> state def
R61441:61445 Imp <> state def
R61434:61436 Imp <> com ind
R61599:61604 Equiv <> ceval' ind
R61548:61550 Equiv <> ::x_'/'_x_'||'''_x not
R61553:61557 Equiv <> ::x_'/'_x_'||'''_x not
R61547:61547 Equiv <> c var
R61551:61552 Equiv <> st var
R61558:61561 Equiv <> st'' var
R61532:61534 Equiv <> ::x_'~'_x not
R61529:61531 Equiv <> st' var
R61535:61538 Equiv <> st'' var
R61508:61510 Imp <> ::x_'/'_x_'||'_x not
R61513:61516 Imp <> ::x_'/'_x_'||'_x not
R61507:61507 Equiv <> c var
R61511:61512 Equiv <> st var
R61517:61519 Equiv <> st' var
R61599:61604 Equiv <> ceval' ind
not 61573 <> ::x_'/'_x_'||'''_x
def 61694:61700 <> cequiv'
R61711:61713 Imp <> com ind
R61745:61749 Imp <> state def
R61757:61757 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R61773:61779 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R61795:61795 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R61760:61762 Equiv <> ::x_'/'_x_'||'''_x not
R61765:61769 Equiv <> ::x_'/'_x_'||'''_x not
R61758:61759 Equiv <> c1 var
R61763:61764 Equiv <> st var
R61770:61772 Equiv <> st' var
R61782:61784 Equiv <> ::x_'/'_x_'||'''_x not
R61787:61791 Equiv <> ::x_'/'_x_'||'''_x not
R61780:61781 Equiv <> c2 var
R61785:61786 Equiv <> st var
R61792:61794 Equiv <> st' var
prf 61967:61981 <> cequiv__cequiv'
R62000:62002 Imp <> com ind
R62024:62030 Equiv <> cequiv' def
R62035:62036 Equiv <> c2 var
R62032:62033 Equiv <> c1 var
R62008:62013 Equiv <> cequiv def
R62018:62019 Equiv <> c2 var
R62015:62016 Equiv <> c1 var
R62056:62061 Equiv <> cequiv def
R62064:62070 Equiv <> cequiv' def
R62122:62128 Equiv <> E_equiv constr
R62122:62128 Equiv <> E_equiv constr
R62224:62230 Equiv <> E_equiv constr
R62224:62230 Equiv <> E_equiv constr
def 62453:62472 <> identity_assignment'
R62478:62484 Equiv <> cequiv' def
R62493:62497 Imp <> ::x_'::='_x not
R62492:62492 Imp <> X def
R62498:62500 Imp <> AId constr
R62502:62502 Imp <> X def
R62486:62489 Imp <> ::'SKIP' not
R62524:62530 Equiv <> cequiv' def
R62659:62664 Imp <> update def
R62679:62679 Imp <> X def
R62671:62671 Imp <> X def
R62645:62651 Equiv <> E_equiv constr
R62659:62664 Imp <> update def
R62679:62679 Imp <> X def
R62671:62671 Imp <> X def
R62645:62651 Equiv <> E_equiv constr
R62724:62736 Equiv <> stequiv_trans prfax
R62724:62736 Equiv <> stequiv_trans prfax
R62764:62770 Equiv <> stequiv def
R62787:62797 Imp <> update_same thm
R62787:62797 Imp <> update_same thm
prf 64172:64202 <> swap_noninterfering_assignments
R64306:64311 Equiv <> cequiv def
R64355:64357 Imp <> ::x_';;'_x not
R64348:64352 Imp <> ::x_'::='_x not
R64346:64347 Equiv <> l2 var
R64353:64354 Equiv <> a2 var
R64360:64364 Imp <> ::x_'::='_x not
R64358:64359 Equiv <> l1 var
R64365:64366 Equiv <> a1 var
R64327:64329 Imp <> ::x_';;'_x not
R64320:64324 Imp <> ::x_'::='_x not
R64318:64319 Equiv <> l1 var
R64325:64326 Equiv <> a1 var
R64332:64336 Imp <> ::x_'::='_x not
R64330:64331 Equiv <> l2 var
R64337:64338 Equiv <> a2 var
R64274:64293 Equiv <> var_not_used_in_aexp ind
R64298:64299 Equiv <> a1 var
R64295:64296 Equiv <> l2 var
R64242:64261 Equiv <> var_not_used_in_aexp ind
R64266:64267 Equiv <> a2 var
R64263:64264 Equiv <> l1 var
R64229:64232 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R64227:64228 Equiv <> l1 var
R64233:64234 Equiv <> l2 var
