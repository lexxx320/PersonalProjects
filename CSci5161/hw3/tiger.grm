structure A = Absyn

type svalue = Tokens.svalue
type pos = int
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue,pos) Tokens.token

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  exp | program of A.exp | lvalue | dec | decs | exps |tydec | vardec | fundec | ty | tyfields | typeid | matchedExp | unmatchedExp |idEQExpPairs

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger
%verbose

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%nonassoc LBRACK RBRACK
%nonassoc LPAREN RPAREN
%left TIMES DIVIDE
%left PLUS MINUS
%nonassoc EQ LT LE GT GE NEQ
%left AND OR
%left UMINUS 
%nonassoc ASSIGN
%nonassoc IF THEN ELSE WHILE DO

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				(exp)
     
lvalue : ID ()
       |lvalue DOT ID ()
       |lvalue LBRACK exp RBRACK ()
	
exp: NIL		()
    |INT  ()
    |STRING ()
    |lvalue ()
    |LPAREN exps RPAREN ()
    |LPAREN RPAREN ()
    |ID LPAREN exps RPAREN ()
    |exp PLUS exp ()
    |exp MINUS exp ()
    |exp TIMES exp ()
    |exp DIVIDE exp ()
    |exp EQ exp ()
    |exp NEQ exp ()
    |exp LT exp ()
    |exp LE exp ()
    |exp GT exp ()
    |exp GE exp ()
    |exp AND exp ()
    |exp OR exp ()
    |LET decs IN exps END ()
    |MINUS exp %prec UMINUS ()
    |lvalue ASSIGN exp ()
    |matchedExp ()
    |unmatchedExp ()
    |WHILE exp DO exp ()
    |FOR ID ASSIGN exp TO exp DO exp ()
    |BREAK ()
    |LPAREN exp RPAREN ()
    |typeid LBRACK exp RBRACK exp OF exp ()
    |typeid LBRACE idEQExpPairs RBRACE ()

idEQExpPairs : ID EQ exp ()
              |ID EQ exp COMMA idEQExpPairs ()
    
    
matchedExp : IF exp THEN matchedExp ELSE matchedExp ()

unmatchedExp : IF exp THEN exp ()
              |IF exp THEN matchedExp ELSE unmatchedExp ()

typeid : ID ()
    
exps : exp () 
      |exp SEMICOLON exps ()

decs : dec decs ()
      | ()

dec : tydec ()
     |vardec ()
     |fundec ()

tydec : TYPE typeid EQ ty()

ty : typeid ()
    |LBRACE tyfields RBRACE ()
    |ARRAY OF typeid ()

tyfields : ID COLON typeid ()
          |COMMA ID COLON typeid ()
          | ()

vardec : VAR ID ASSIGN exp ()
        |VAR ID COLON typeid ASSIGN exp ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
        |FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()





        
      

