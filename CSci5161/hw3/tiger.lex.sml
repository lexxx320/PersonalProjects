functor TigerLexFun(structure Tokens: Tiger_TOKENS)=
   struct
    structure UserDeclarations =
      struct
type svalue = Tokens.svalue
type pos = int
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue,pos) Tokens.token

val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos
val commentNesting = ref 0
val doneWithString = ref 1
exception StringError
fun err(p1,p2) = ErrorMsg.error p1

fun revfold _ nil b = b (* If the second argument is nil (an empty list), return the third argument. *)
| revfold f (hd::tl) b = revfold f tl (f(hd,b)); (* Otherwise, recurse on the tail of the list and
                                                   replace b with the result of applying f to the head
                                                   of the list and the old b. *)

fun eof() = let val pos = hd(!linePos) 
            in 
              if !commentNesting > 0
              then (ErrorMsg.error pos ("Unmatched block comment");
                    Tokens.EOF(pos, pos))
              else Tokens.EOF(pos,pos) 
            end


end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\011\011\011\011\011\011\011\011\011\097\099\011\011\011\011\011\
\\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\011\
\\097\011\096\011\011\011\095\011\094\093\092\091\090\089\088\085\
\\083\083\083\083\083\083\083\083\083\083\081\080\077\076\074\011\
\\011\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\
\\015\015\015\015\015\015\015\015\015\015\015\073\011\072\011\011\
\\011\067\062\015\060\054\044\015\015\041\015\015\038\015\035\033\
\\015\015\015\015\025\015\022\017\015\015\015\014\013\012\011\011\
\\011"
),
 (3, 
"\100\100\100\100\100\100\100\100\100\100\105\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\103\100\100\100\100\101\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\100\
\\100"
),
 (5, 
"\106\106\106\106\106\106\106\106\106\106\112\106\106\106\106\106\
\\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\
\\106\106\111\106\106\106\106\106\106\106\106\106\106\106\106\106\
\\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\
\\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\
\\106\106\106\106\106\106\106\106\106\106\106\106\108\106\106\106\
\\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\
\\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\106\
\\106"
),
 (7, 
"\113\113\113\113\113\113\113\113\113\113\000\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\121\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\118\118\118\118\118\118\118\118\118\118\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\117\113\116\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\115\113\
\\113\113\113\113\114\113\113\113\113\113\113\113\113\113\113\113\
\\113"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\018\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\019\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\020\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\021\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\023\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\024\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\030\016\016\016\016\016\016\029\
\\016\016\016\016\016\016\016\016\016\026\016\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\027\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\028\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\031\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\032\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\034\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\036\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\037\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\039\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\040\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\043\016\016\016\016\016\016\016\042\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\052\
\\016\016\016\016\016\045\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\046\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\047\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\048\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\049\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\050\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\051\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\053\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\057\016\055\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\056\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\058\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\059\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\061\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\063\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\064\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\065\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\066\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\068\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\069\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\070\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\016\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\071\016\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\079\078\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (83, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\084\084\084\084\084\084\084\084\084\084\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (85, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\087\000\000\000\000\086\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (86, 
"\086\086\086\086\086\086\086\086\086\086\000\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086"
),
 (97, 
"\000\000\000\000\000\000\000\000\000\098\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\098\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (101, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (103, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\104\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (106, 
"\107\107\107\107\107\107\107\107\107\107\000\107\107\107\107\107\
\\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\
\\107\107\000\107\107\107\107\107\107\107\107\107\107\107\107\107\
\\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\
\\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\
\\107\107\107\107\107\107\107\107\107\107\107\107\000\107\107\107\
\\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\
\\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\107\
\\107"
),
 (108, 
"\000\000\000\000\000\000\000\000\000\109\109\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\109\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (109, 
"\000\000\000\000\000\000\000\000\000\109\109\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\109\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\110\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (118, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\119\119\119\119\119\119\119\119\119\119\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (119, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\120\120\120\120\120\120\120\120\120\120\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [], trans = 7},
{fin = [], trans = 7},
{fin = [], trans = 9},
{fin = [], trans = 9},
{fin = [(N 194)], trans = 0},
{fin = [(N 114),(N 194)], trans = 0},
{fin = [(N 85),(N 194)], trans = 0},
{fin = [(N 116),(N 194)], trans = 0},
{fin = [(N 171),(N 194)], trans = 15},
{fin = [(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 17},
{fin = [(N 171)], trans = 18},
{fin = [(N 171)], trans = 19},
{fin = [(N 171)], trans = 20},
{fin = [(N 61),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 22},
{fin = [(N 171)], trans = 23},
{fin = [(N 12),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 25},
{fin = [(N 171)], trans = 26},
{fin = [(N 171)], trans = 27},
{fin = [(N 8),(N 171)], trans = 15},
{fin = [(N 51),(N 171)], trans = 15},
{fin = [(N 171)], trans = 30},
{fin = [(N 171)], trans = 31},
{fin = [(N 71),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 33},
{fin = [(N 30),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 35},
{fin = [(N 171)], trans = 36},
{fin = [(N 41),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 38},
{fin = [(N 171)], trans = 39},
{fin = [(N 45),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 41},
{fin = [(N 37),(N 171)], trans = 15},
{fin = [(N 74),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 44},
{fin = [(N 171)], trans = 45},
{fin = [(N 171)], trans = 46},
{fin = [(N 171)], trans = 47},
{fin = [(N 171)], trans = 48},
{fin = [(N 171)], trans = 49},
{fin = [(N 171)], trans = 50},
{fin = [(N 21),(N 171)], trans = 15},
{fin = [(N 171)], trans = 52},
{fin = [(N 55),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 54},
{fin = [(N 171)], trans = 55},
{fin = [(N 34),(N 171)], trans = 15},
{fin = [(N 171)], trans = 57},
{fin = [(N 171)], trans = 58},
{fin = [(N 66),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 60},
{fin = [(N 48),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 62},
{fin = [(N 171)], trans = 63},
{fin = [(N 171)], trans = 64},
{fin = [(N 171)], trans = 65},
{fin = [(N 27),(N 171)], trans = 15},
{fin = [(N 171),(N 194)], trans = 67},
{fin = [(N 171)], trans = 68},
{fin = [(N 171)], trans = 69},
{fin = [(N 171)], trans = 70},
{fin = [(N 80),(N 171)], trans = 15},
{fin = [(N 118),(N 194)], trans = 0},
{fin = [(N 120),(N 194)], trans = 0},
{fin = [(N 92),(N 194)], trans = 74},
{fin = [(N 90)], trans = 0},
{fin = [(N 102),(N 194)], trans = 0},
{fin = [(N 97),(N 194)], trans = 77},
{fin = [(N 100)], trans = 0},
{fin = [(N 95)], trans = 0},
{fin = [(N 126),(N 194)], trans = 0},
{fin = [(N 128),(N 194)], trans = 81},
{fin = [(N 83)], trans = 0},
{fin = [(N 174),(N 194)], trans = 83},
{fin = [(N 174)], trans = 83},
{fin = [(N 104),(N 194)], trans = 85},
{fin = [(N 178)], trans = 86},
{fin = [(N 184)], trans = 0},
{fin = [(N 112),(N 194)], trans = 0},
{fin = [(N 108),(N 194)], trans = 0},
{fin = [(N 130),(N 194)], trans = 0},
{fin = [(N 110),(N 194)], trans = 0},
{fin = [(N 106),(N 194)], trans = 0},
{fin = [(N 122),(N 194)], trans = 0},
{fin = [(N 124),(N 194)], trans = 0},
{fin = [(N 87),(N 194)], trans = 0},
{fin = [(N 132),(N 194)], trans = 0},
{fin = [(N 181),(N 194)], trans = 97},
{fin = [(N 181)], trans = 97},
{fin = [(N 1)], trans = 0},
{fin = [(N 189)], trans = 0},
{fin = [(N 189)], trans = 101},
{fin = [(N 187)], trans = 0},
{fin = [(N 189)], trans = 103},
{fin = [(N 192)], trans = 0},
{fin = [(N 3)], trans = 0},
{fin = [(N 155),(N 168)], trans = 106},
{fin = [(N 155)], trans = 106},
{fin = [(N 134),(N 168)], trans = 108},
{fin = [], trans = 109},
{fin = [(N 164)], trans = 0},
{fin = [(N 166),(N 168)], trans = 0},
{fin = [(N 157)], trans = 0},
{fin = [(N 152)], trans = 0},
{fin = [(N 138),(N 152)], trans = 0},
{fin = [(N 136),(N 152)], trans = 0},
{fin = [(N 148),(N 152)], trans = 0},
{fin = [(N 142),(N 152)], trans = 0},
{fin = [(N 152)], trans = 118},
{fin = [], trans = 119},
{fin = [(N 146)], trans = 0},
{fin = [(N 140),(N 152)], trans = 0},
{fin = [(N 150)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;
val comment = STARTSTATE 3;
val controlChar = STARTSTATE 9;
val escape = STARTSTATE 7;
val string = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => (lineNum := !lineNum+1; linePos := yypos :: !linePos; continue())
| 100 => (Tokens.NEQ(yypos, yypos+2))
| 102 => (Tokens.EQ(yypos, yypos + 2))
| 104 => (Tokens.DIVIDE(yypos, yypos + 1))
| 106 => (Tokens.TIMES(yypos, yypos + 1))
| 108 => (Tokens.MINUS(yypos, yypos + 1))
| 110 => (Tokens.PLUS(yypos, yypos + 1))
| 112 => (Tokens.DOT(yypos, yypos + 1))
| 114 => (Tokens.RBRACE(yypos, yypos + 1))
| 116 => (Tokens.LBRACE(yypos, yypos + 1))
| 118 => (Tokens.RBRACK(yypos, yypos + 1))
| 12 => (Tokens.VAR(yypos, yypos + 3))
| 120 => (Tokens.LBRACK(yypos, yypos + 1))
| 122 => (Tokens.RPAREN(yypos, yypos + 1))
| 124 => (Tokens.LPAREN(yypos, yypos + 1))
| 126 => (Tokens.SEMICOLON(yypos, yypos + 1))
| 128 => (Tokens.COLON(yypos, yypos + 1))
| 130 => (Tokens.COMMA(yypos, yypos + 1))
| 132 => let val yytext=yymktext() in doneWithString := 0; 
                  YYBEGIN string; let val rest = lex()
                                      val totalSize = size(yytext) + size(rest)
                                  in if !doneWithString = 0 (*Didn't mach string, go back to INITIAL start state and continue*)
                                     then (ErrorMsg.error yypos ("unmatched string");
                                           YYBEGIN INITIAL;
                                           Tokens.STRING("", yypos, yypos))
                                     else Tokens.STRING(rest, yypos, yypos + size(yytext) + size(rest))
                                  end end
| 134 => (YYBEGIN escape; continue())
| 136 => (YYBEGIN string; "\n" ^ continue())
| 138 => (YYBEGIN string; "\t" ^ continue())
| 140 => (YYBEGIN string; "\"" ^ continue())
| 142 => (YYBEGIN string; "\\" ^ continue())
| 146 => let val yytext=yymktext() in YYBEGIN string; case Int.fromString(yytext) of
                                              SOME t => String.str(Char.chr(t)) ^ continue()
                                             |NONE   => (ErrorMsg.error yypos ("illegal escape sequence " ^ yytext); continue()) end
| 148 => (YYBEGIN controlChar; continue())
| 150 => let val yytext=yymktext() in YYBEGIN string; case Char.fromString("\\^" ^ yytext)
                                          of SOME t => (String.str(t) ^ continue())
                                            |NONE => (ErrorMsg.error yypos ("Illegal control character \\^" ^ yytext); continue() )  end
| 152 => let val yytext=yymktext() in YYBEGIN string; ErrorMsg.error yypos ("illegal escape sequence \\" ^ yytext); continue() end
| 155 => let val yytext=yymktext() in yytext ^ lex() end
| 157 => let val yytext=yymktext() in lineNum := !lineNum+1; linePos := yypos :: !linePos;yytext end
| 164 => (lex())
| 166 => (doneWithString := 1; YYBEGIN INITIAL; "")
| 168 => let val yytext=yymktext() in ErrorMsg.error yypos ("Illegal character in string " ^ yytext); continue() end
| 171 => let val yytext=yymktext() in Tokens.ID(yytext, yypos, yypos+size(yytext)) end
| 174 => let val yytext=yymktext() in Tokens.INT((revfold (fn(a,r)=>ord(a)-ord(#"0")+10*r) 
                                (explode yytext) 0), 
                       yypos, yypos+size(yytext))  end
| 178 => (lex())
| 181 => (lex())
| 184 => (YYBEGIN comment; commentNesting := !commentNesting + 1 ; lex())
| 187 => (YYBEGIN comment; commentNesting := !commentNesting + 1 ; lex())
| 189 => (continue())
| 192 => (if !commentNesting = 1 
                   then YYBEGIN INITIAL 
                   else YYBEGIN comment; commentNesting := !commentNesting - 1; lex())
| 194 => let val yytext=yymktext() in ErrorMsg.error yypos ("illegal character " ^ yytext); continue() end
| 21 => (Tokens.FUNCTION(yypos, yypos + 8))
| 27 => (Tokens.BREAK(yypos, yypos+5))
| 3 => (lineNum := !lineNum+1; linePos := yypos :: !linePos; continue())
| 30 => (Tokens.OF(yypos, yypos + 2))
| 34 => (Tokens.END(yypos, yypos+3))
| 37 => (Tokens.IN(yypos, yypos+2))
| 41 => (Tokens.NIL(yypos, yypos+3))
| 45 => (Tokens.LET(yypos, yypos + 3))
| 48 => (Tokens.DO(yypos, yypos + 2))
| 51 => (Tokens.TO(yypos, yypos + 2))
| 55 => (Tokens.FOR(yypos, yypos + 3))
| 61 => (Tokens.WHILE(yypos, yypos + 5))
| 66 => (Tokens.ELSE(yypos, yypos + 4))
| 71 => (Tokens.THEN(yypos, yypos + 4))
| 74 => (Tokens.IF(yypos, yypos + 2))
| 8 => (Tokens.TYPE(yypos, yypos + 4))
| 80 => (Tokens.ARRAY(yypos, yypos + 5))
| 83 => (Tokens.ASSIGN(yypos, yypos+1))
| 85 => (Tokens.OR(yypos, yypos+2))
| 87 => (Tokens.AND(yypos, yypos + 2))
| 90 => (Tokens.GE(yypos, yypos+2))
| 92 => (Tokens.GT(yypos, yypos+1))
| 95 => (Tokens.LE(yypos, yypos+2))
| 97 => (Tokens.LT(yypos, yypos+1))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Unsafe.Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(Unsafe.CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(Unsafe.CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
