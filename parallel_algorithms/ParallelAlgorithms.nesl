1A)

function convert x = if x then 1 else 0;
function myPack1 a = 
  let x = {convert x : (n, x) in a};   
      summed = plus_scan(x);
      result = dist(0, summed[#summed - 1] + 1);
      (values, _) = unzip a;
  in write(result, zip(summed, values));

arr = [(1, T), (2, T), (3, F), (4, T), (5, F), (6, T)];
myPack1(arr);

function myPack2 l = {n : (n, b) in l |  b};
arr = [(1, T), (2, T), (3, F), (4, T), (5, F), (6, T)];
test = myPack2(arr);


---------------------------------------------------------------
1B)

function scan A = 
    if #A == 1
    then isChar(A[0])
    else 
        let S = scan({isChar(A[2 * i] : i in [0 : #A / 2]})
            R = {if i mod 2 = 0 then S[i/2]

function isNumOrSpace c = 
  let (_, ans) = parse_int([c])
  in ans;

function merge

function my_scan A = 
    if (#A) == 1 then [isNum (A[0])]
    else [F];


------------------------------------------------------------------
2)

function my_min l = 
    let minScan = min_scan l
    in {min(l[i], minScan[i]) : i in [0 : #l]};

function stock p = 
    let mins = my_min p;
        profits = {p[i] - mins[i] : i in [0 : #p]};
        max_profit = max_scan(profits);
    in max_profit[(#max_profit) - 1];    

x = stock([12, 11, 10, 8, 5, 8, 9, 6, 7, 7, 10, 7, 4, 2]);



